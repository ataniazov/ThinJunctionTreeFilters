<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Aug 19 09:38:08 PDT 2003 -->
<TITLE>
Flops
</TITLE>
<META NAME="keywords" CONTENT="javaslam.util.Flops,Flops class">
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="Flops";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../javaslam/filter/Filter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../javaslam/prob/Gaussian.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Flops.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
javaslam.util</FONT>
<BR>
Class Flops</H2>
<PRE>
<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">java.lang.Object</A>
  |
  +--<B>javaslam.util.Flops</B>
</PRE>
<HR>
<DL>
<DT>public class <B>Flops</B><DT>extends <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">Object</A></DL>

<P>
A class containing methods for counting floating point operations.
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#countFlops">countFlops</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A flag that determines whether <A HREF="../../javaslam/util/Flops.html#count(long)"><CODE>count(long)</CODE></A> will
 increment the flop count.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#flops">flops</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A counter of the number of floating-point operations performed.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#Flops()">Flops</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#add(int, int)">add</A></B>(int&nbsp;n,
    int&nbsp;m)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to add two
 <code>n</code>-by-<code>m</code> matrices.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#backSubst(int, int, int)">backSubst</A></B>(int&nbsp;n,
          int&nbsp;k,
          int&nbsp;m)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is upper triangular.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#chol(int)">chol</A></B>(int&nbsp;n)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the Cholesky decomposition of an <code>n</code>-by-<code>n</code>
 symmetric positive definite matrix.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#count()">count</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of floating point operations performed by code
 in the <code>tjtf</code> package since the virtual machine was
 started.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#count(long)">count</A></B>(long&nbsp;f)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Increments the flop counter by <code>f</code>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#det(int, boolean)">det</A></B>(int&nbsp;n,
    boolean&nbsp;isSPD)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the determinant of an <code>n</code>-by-<code>n</code> matrix
 that is possibly symmetric positive definite.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#exp()">exp</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the exponential of a number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#forwardSubst(int, int, int)">forwardSubst</A></B>(int&nbsp;n,
             int&nbsp;k,
             int&nbsp;m)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is unit lower triangular.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#inv(int, boolean)">inv</A></B>(int&nbsp;n,
    boolean&nbsp;isSPD)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to invert an
 <code>n</code>-by-<code>n</code> matrix that is possibly
 symmetric positive definite.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#log()">log</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the logarithm of a number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#lu(int)">lu</A></B>(int&nbsp;n)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the LU decomposition of an <code>n</code>-by-<code>n</code>
 square matrix.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#mult(int, int, int)">mult</A></B>(int&nbsp;n,
     int&nbsp;k,
     int&nbsp;m)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the product of two matrices <I>A</i> and <i>B</i>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#rand()">rand</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute a
 random double-precision floating point number between 0.0 and 1.0
 using a simple linear-congruential formula <i>x</i><sub>i +
 1</sub> = <b>a</b> <i>x</i><sub>i</sub> + <b>b</b> (mod <b>c</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#randn()">randn</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute a
 sample from the standard normal using the Box-Muller method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#randnorm(int, int)">randnorm</A></B>(int&nbsp;n,
         int&nbsp;k)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 <code>n</code> samples from a <code>k</code>-dimensional
 multivariate Gaussian distribution represented using a covariance
 matrix.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#reset()">reset</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A method that resets the flop count.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#solve(int, int, int, boolean)">solve</A></B>(int&nbsp;n,
      int&nbsp;k,
      int&nbsp;m,
      boolean&nbsp;isSPD)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to solve for
 <i>X</i> in the matrix equation <i>AX</i> = <i>B</i> where
 <i>A</i> is possibly symmetric positive definite.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#sqrt()">sqrt</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the square root of a number.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/util/Flops.html#trace(int)">trace</A></B>(int&nbsp;n)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Counts the number of floating point operations used to compute
 the trace of a square matrix <I>A</i>.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">Object</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#clone()">clone</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#equals(java.lang.Object)">equals</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#finalize()">finalize</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#getClass()">getClass</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#hashCode()">hashCode</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#notify()">notify</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#notifyAll()">notifyAll</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#toString()">toString</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait()">wait</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait(long)">wait</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait(long, int)">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="countFlops"><!-- --></A><H3>
countFlops</H3>
<PRE>
public static boolean <B>countFlops</B></PRE>
<DL>
<DD>A flag that determines whether <A HREF="../../javaslam/util/Flops.html#count(long)"><CODE>count(long)</CODE></A> will
 increment the flop count.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="flops"><!-- --></A><H3>
flops</H3>
<PRE>
protected static long <B>flops</B></PRE>
<DL>
<DD>A counter of the number of floating-point operations performed.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="Flops()"><!-- --></A><H3>
Flops</H3>
<PRE>
public <B>Flops</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="count()"><!-- --></A><H3>
count</H3>
<PRE>
public static long <B>count</B>()</PRE>
<DL>
<DD>Returns the number of floating point operations performed by code
 in the <code>tjtf</code> package since the virtual machine was
 started.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="count(long)"><!-- --></A><H3>
count</H3>
<PRE>
public static void <B>count</B>(long&nbsp;f)</PRE>
<DL>
<DD>Increments the flop counter by <code>f</code>.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="reset()"><!-- --></A><H3>
reset</H3>
<PRE>
public static void <B>reset</B>()</PRE>
<DL>
<DD>A method that resets the flop count.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="solve(int, int, int, boolean)"><!-- --></A><H3>
solve</H3>
<PRE>
public static int <B>solve</B>(int&nbsp;n,
                        int&nbsp;k,
                        int&nbsp;m,
                        boolean&nbsp;isSPD)</PRE>
<DL>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> in the matrix equation <i>AX</i> = <i>B</i> where
 <i>A</i> is possibly symmetric positive definite.

 This algorithm comes from the Numerical Recipes algorithm via the
 Lightspeed Matlab library of Tom Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows in <i>A</i><DD><CODE>k</CODE> - the number of columns in <i>A</i> (and also the number
              of rows in <i>B</i>)<DD><CODE>m</CODE> - the number of columns in <i>B</i><DD><CODE>isSPD</CODE> - <tt>true</tt> if <i>A</i> is positive definite, enabling 
              the Cholesky decomposition
<DT><B>Returns:</B><DD>the exact number of floating point operations required to 
         solve for <i>X</i>.</DL>
</DD>
</DL>
<HR>

<A NAME="backSubst(int, int, int)"><!-- --></A><H3>
backSubst</H3>
<PRE>
public static int <B>backSubst</B>(int&nbsp;n,
                            int&nbsp;k,
                            int&nbsp;m)</PRE>
<DL>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is upper triangular.

 This algorithm comes from the Numerical Recipes algorithm via the
 Lightspeed Matlab library of Tom Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows in <i>A</i><DD><CODE>k</CODE> - the number of columns in <i>A</i> (and also the number
              of rows in <i>B</i>)<DD><CODE>m</CODE> - the number of columns in <i>B</i>
<DT><B>Returns:</B><DD>the exact number of floating point operations required to 
         solve for <i>X</i> via back substitution.</DL>
</DD>
</DL>
<HR>

<A NAME="forwardSubst(int, int, int)"><!-- --></A><H3>
forwardSubst</H3>
<PRE>
public static int <B>forwardSubst</B>(int&nbsp;n,
                               int&nbsp;k,
                               int&nbsp;m)</PRE>
<DL>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is unit lower triangular.

 This algorithm comes from the Numerical Recipes algorithm via the
 Lightspeed Matlab library of Tom Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows in <i>A</i><DD><CODE>k</CODE> - the number of columns in <i>A</i> (and also the number
              of rows in <i>B</i>)<DD><CODE>m</CODE> - the number of columns in <i>B</i>
<DT><B>Returns:</B><DD>the exact number of floating point operations required to 
         solve for <i>X</i> via back substitution.</DL>
</DD>
</DL>
<HR>

<A NAME="inv(int, boolean)"><!-- --></A><H3>
inv</H3>
<PRE>
public static int <B>inv</B>(int&nbsp;n,
                      boolean&nbsp;isSPD)</PRE>
<DL>
<DD>Counts the number of floating point operations used to invert an
 <code>n</code>-by-<code>n</code> matrix that is possibly
 symmetric positive definite.

 This algorithm comes from the Numerical Recipes algorithm via the
 Lightspeed Matlab library of Tom Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows and columns of the square matrix<DD><CODE>isSPD</CODE> - <tt>true</tt> if the matrix is positive definite, 
              enabling the Cholesky decomposition
<DT><B>Returns:</B><DD>the exact number of floating point operations required to 
         invert the matrix</DL>
</DD>
</DL>
<HR>

<A NAME="chol(int)"><!-- --></A><H3>
chol</H3>
<PRE>
public static int <B>chol</B>(int&nbsp;n)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the Cholesky decomposition of an <code>n</code>-by-<code>n</code>
 symmetric positive definite matrix.

 This formula comes from the Numerical Recipes algorithm via the
 Lightspeed Matlab library of Tom Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows and columns of the square matrix
<DT><B>Returns:</B><DD>the number of flops required to compute the Cholesky
         decomposition</DL>
</DD>
</DL>
<HR>

<A NAME="lu(int)"><!-- --></A><H3>
lu</H3>
<PRE>
public static int <B>lu</B>(int&nbsp;n)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the LU decomposition of an <code>n</code>-by-<code>n</code>
 square matrix.

 This formula comes from 
      http://www.maths.uq.edu.au/~gac/math2200/mn_nla2.pdf.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows and columns of the square matrix
<DT><B>Returns:</B><DD>the number of flops required to compute the Cholesky
         decomposition</DL>
</DD>
</DL>
<HR>

<A NAME="sqrt()"><!-- --></A><H3>
sqrt</H3>
<PRE>
public static int <B>sqrt</B>()</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the square root of a number.  This function returns
 <code>15</code> and is based on source code for
 <code>sqrt()</code> function at
 http://www.opencores.org/cvsweb.shtml/or1k/newlib/newlib/libm/mathfp/s_sqrt.c.
 This formula comes from the Lightspeed Matlab library of Tom
 Minka.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="det(int, boolean)"><!-- --></A><H3>
det</H3>
<PRE>
public static int <B>det</B>(int&nbsp;n,
                      boolean&nbsp;isSPD)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the determinant of an <code>n</code>-by-<code>n</code> matrix
 that is possibly symmetric positive definite.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows and columns of the square matrix<DD><CODE>isSPD</CODE> - <tt>true</tt> if the matrix is positive definite, 
              enabling the Cholesky decomposition

 This formula comes from the Lightspeed Matlab library of Tom
 Minka.</DL>
</DD>
</DL>
<HR>

<A NAME="log()"><!-- --></A><H3>
log</H3>
<PRE>
public static int <B>log</B>()</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the logarithm of a number.  This function returns
 <code>20</code>; this formula comes from the Lightspeed Matlab
 library of Tom Minka.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="exp()"><!-- --></A><H3>
exp</H3>
<PRE>
public static int <B>exp</B>()</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the exponential of a number.  This function returns
 <code>20</code>; this formula comes from the Lightspeed Matlab
 library of Tom Minka.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="rand()"><!-- --></A><H3>
rand</H3>
<PRE>
public static int <B>rand</B>()</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute a
 random double-precision floating point number between 0.0 and 1.0
 using a simple linear-congruential formula <i>x</i><sub>i +
 1</sub> = <b>a</b> <i>x</i><sub>i</sub> + <b>b</b> (mod <b>c</b>).
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="randn()"><!-- --></A><H3>
randn</H3>
<PRE>
public static int <B>randn</B>()</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute a
 sample from the standard normal using the Box-Muller method.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="randnorm(int, int)"><!-- --></A><H3>
randnorm</H3>
<PRE>
public static int <B>randnorm</B>(int&nbsp;n,
                           int&nbsp;k)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 <code>n</code> samples from a <code>k</code>-dimensional
 multivariate Gaussian distribution represented using a covariance
 matrix.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of samples<DD><CODE>k</CODE> - the dimension of the Gaussian distribution
<DT><B>Returns:</B><DD>the number of floating-point operations required to
         sample <code>n</code> times from a
         <code>k</code>-dimensional multivariate Gaussian
         distribution represented using a covariance matrix.</DL>
</DD>
</DL>
<HR>

<A NAME="mult(int, int, int)"><!-- --></A><H3>
mult</H3>
<PRE>
public static int <B>mult</B>(int&nbsp;n,
                       int&nbsp;k,
                       int&nbsp;m)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the product of two matrices <I>A</i> and <i>B</i>.

 This formula comes from the Lightspeed Matlab library of Tom
 Minka.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows in <i>A</i><DD><CODE>k</CODE> - the number of columns in <i>A</i> (and also the number
              of rows in <i>B</i>)<DD><CODE>m</CODE> - the number of columns in <i>B</i>
<DT><B>Returns:</B><DD>the number of flops used to compute the product <i>AB</i></DL>
</DD>
</DL>
<HR>

<A NAME="trace(int)"><!-- --></A><H3>
trace</H3>
<PRE>
public static int <B>trace</B>(int&nbsp;n)</PRE>
<DL>
<DD>Counts the number of floating point operations used to compute
 the trace of a square matrix <I>A</i>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows (and columns) in <i>A</i>
<DT><B>Returns:</B><DD>the number of flops used to compute tr(<i>A</i>)</DL>
</DD>
</DL>
<HR>

<A NAME="add(int, int)"><!-- --></A><H3>
add</H3>
<PRE>
public static int <B>add</B>(int&nbsp;n,
                      int&nbsp;m)</PRE>
<DL>
<DD>Counts the number of floating point operations used to add two
 <code>n</code>-by-<code>m</code> matrices.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>n</CODE> - the number of rows in each matrix<DD><CODE>m</CODE> - the number of columns in each matrix
<DT><B>Returns:</B><DD>the number of flops used to compute the sum 
              <i>A</i> + <i>B</i></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../javaslam/filter/Filter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../javaslam/prob/Gaussian.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Flops.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

</BODY>
</HTML>
