<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Aug 19 09:38:09 PDT 2003 -->
<TITLE>
JunctionTree
</TITLE>
<META NAME="keywords" CONTENT="javaslam.tjt.JunctionTree,JunctionTree class">
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="JunctionTree";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../javaslam/filter/JTFilter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JunctionTree.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
javaslam.tjt</FONT>
<BR>
Class JunctionTree</H2>
<PRE>
<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">java.lang.Object</A>
  |
  +--<B>javaslam.tjt.JunctionTree</B>
</PRE>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A></DD>
</DL>
<HR>
<DL>
<DT>public class <B>JunctionTree</B><DT>extends <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">Object</A></DL>

<P>
A junction tree for a Gaussian graphical model.  A junction tree
 over a set of potentials is a graph whose nodes (called
 <i>clusters</i>) are sets of variables and that has three
 properties:

 <ol>
   <li><i>singly-connected property</i>: the graph is a tree; and,</li>
   <li><i>potential property</i>: all potentials that have been 
       added to this junction tree are covered by at least one 
       cluster; and,</li>
   <li><i>running intersection property</i>: if <i>C<sub>1</sub></i> and
       <i>C<sub>2</sub></i> are clusters that contain the variable
       <i>x</i>, then all clusters (and separators) on the (unique) path
       between <i>C<sub>1</sub></i> and <i>C<sub>2</sub></i> also 
       contain <i>x</i>.</li>
 </ol>

 In addition, each edge has an associated <i>separator</i> which is
 the intersection of its two incident clusters.  Finally, every
 cluster and separator has an associated potential function over its
 variables.  A junction tree is <i>consistent</i> if each separator
 potential agrees with (the appropriate marginal of) its incident
 clusters' potentials.  If a junction tree is <i>valid</i> (meaning
 all of the above properties hold) and it is consistent, then each
 of its cluster (and separator) potentials are marginal
 distributions for the graphical model defined by the normalized
 product of the potentials in the junction tree.

 <p>This implementation is designed to efficiently support
 incremental operations such as adding new variables, multiplying in
 new potentials, and marginalizing out variables; at all times, the
 junction tree remains valid and consistent so that cluster
 marginals are accessible in constant time.</p>
<P>

<P>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->

<A NAME="nested_class_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Nested Class Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A cluster of a junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;class</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A (directed) edge from one cluster to another in a junction tree.</TD>
</TR>
</TABLE>
&nbsp;
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../.././javaslam/util/ListSet.html">ListSet</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#clusters">clusters</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s in this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#significance">significance</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A threshold used in adaptive message passing.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#updated">updated</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The set of clusters that have been updated with new evidence but
 have not yet distributed their evidence (due to lazy or adaptive
 message passing).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../.././javaslam/util/ListSet.html">ListSet</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#variables">variables</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s present in this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Map.html">Map</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#varToClusters">varToClusters</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maps each <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A> to the <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A> of <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s containing it.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#JunctionTree()">JunctionTree</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Default constructor.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#add(javaslam.prob.Variable)">add</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a variable to this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#bestCover(java.util.Set)">bestCover</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the cluster whose intersection with the supplied set of
 variables is largest and whose size is the smallest.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#bestCoverToExtend(java.util.Set)">bestCoverToExtend</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the cluster that, if <A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend</CODE></A>ed with the
 variables in <code>vars</code>, would cause the fewest number of
 cluster <A HREF="../../javaslam/tjt/JunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>enlarge</CODE></A>ments.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#checkValid()">checkValid</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests to see if the junction tree is valid.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#consistent()">consistent</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests to see if the junction tree is consistent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#contains(javaslam.prob.Variable)">contains</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns <code>true</code> if this junction tree contains the
 supplied variable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#createCover(java.util.Set)">createCover</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updates this junction tree so that it has a cluster containing
 the supplied set of variables, while preserving validity and
 consistency.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)">enlarge</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c,
        <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extends the supplied cluster so that it contains the supplied
 variable <i>without preserving consistency or the
 running-intersection property</i>.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)">extend</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;cluster,
       <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Minimally alters the structure and parameterization of the
 junction tree so that <code>cluster</code> covers
 <code>var</code> and validity and consistency are preserved.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getClusters()">getClusters</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A>s of the <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>JunctionTree.Cluster</CODE></A>s of this
 junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getClustersWith(javaslam.prob.Variable)">getClustersWith</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an unmodifiable set of <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s
 containing the supplied variable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getCover(java.util.Set)">getCover</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the smallest cluster containing the supplied variables, or 
 <code>null</code> if there is no such cluster.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getMarginal(java.util.Set, boolean)">getMarginal</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars,
            boolean&nbsp;force)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extracts the marginal from the junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Map.html">Map</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getMarginals(java.util.Collection)">getMarginals</A></B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Collection.html">Collection</A>&nbsp;vars)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extracts a set of unary marginals from the junction tree without
 inverting any cluster potential more than once.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#getVariables()">getVariables</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets an unmodifiable set of the <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in
 this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#link(javaslam.tjt.JunctionTree.Cluster, javaslam.tjt.JunctionTree.Cluster)">link</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c1,
     <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a new pair of edges between the supplied clusters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#marginalizeOut(javaslam.prob.Variable)">marginalizeOut</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marginalizes a variable out of this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#merge(javaslam.tjt.JunctionTree.JTEdge)">merge</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>&nbsp;e)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merges the two clusters that are incident to the supplied edge.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#mergeClustersWith(javaslam.prob.Variable)">mergeClustersWith</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merges all clusters containing a particular variable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#newLeaf(javaslam.tjt.JunctionTree.Cluster)">newLeaf</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an empty cluster and attaches it as a leaf off of the
 supplied cluster.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#parents()">parents</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a directed representation of the junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#passFlows()">passFlows</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Restores consistency; all clusters into new potentials have been
 multiplied that have not yet distributed their evidence do so.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#reduce(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)">reduce</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c,
       <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reduces the supplied cluster so that it no longer contains the
 supplied variable.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#remove(javaslam.tjt.JunctionTree.Cluster)">remove</A></B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes a cluster from this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#remove(javaslam.prob.Variable)">remove</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes a variable from this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#rename(javaslam.prob.Variable, javaslam.prob.Variable)">rename</A></B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var,
       <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;subst)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Renames a variable in this junction tree.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#setSignificance(double)">setSignificance</A></B>(double&nbsp;s)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets a threshold used in adaptive message passing.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#times(javaslam.prob.Gaussian)">times</A></B>(<A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A>&nbsp;p)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Multiplies a new potential into the junction tree and restores
 validity (but not consistency).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#times(javaslam.prob.Gaussian, javaslam.tjt.JunctionTree.Cluster)">times</A></B>(<A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A>&nbsp;p,
      <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;cluster)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Multiplies a new potential into a particular cluster of this
 junction tree and restores validity (but not consistency).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../javaslam/tjt/JunctionTree.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a String representation of this junction tree.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">Object</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#clone()">clone</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#equals(java.lang.Object)">equals</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#finalize()">finalize</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#getClass()">getClass</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#hashCode()">hashCode</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#notify()">notify</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#notifyAll()">notifyAll</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait()">wait</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait(long)">wait</A>, <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#wait(long, int)">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="variables"><!-- --></A><H3>
variables</H3>
<PRE>
protected <A HREF="../.././javaslam/util/ListSet.html">ListSet</A> <B>variables</B></PRE>
<DL>
<DD>The <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s present in this junction tree.
 This set's iterator is consistent with the order in which the
 variables were added to the junction tree.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="clusters"><!-- --></A><H3>
clusters</H3>
<PRE>
protected <A HREF="../.././javaslam/util/ListSet.html">ListSet</A> <B>clusters</B></PRE>
<DL>
<DD>The <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s in this junction tree.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="varToClusters"><!-- --></A><H3>
varToClusters</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Map.html">Map</A> <B>varToClusters</B></PRE>
<DL>
<DD>Maps each <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A> to the <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A> of <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s containing it.  Variables that are not
 currently in the junction tree may still be in this map, but they
 will map to empty sets.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="updated"><!-- --></A><H3>
updated</H3>
<PRE>
protected <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A> <B>updated</B></PRE>
<DL>
<DD>The set of clusters that have been updated with new evidence but
 have not yet distributed their evidence (due to lazy or adaptive
 message passing).  When this set is empty, the junction tree is
 consistent.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="significance"><!-- --></A><H3>
significance</H3>
<PRE>
protected double <B>significance</B></PRE>
<DL>
<DD>A threshold used in adaptive message passing.  If
 <code>significance</code> is non-negative, then when distributing
 evidence from a cluster, messages are only propagated while the
 differential relative entropy (or <A HREF="../../javaslam/prob/Gaussian.html#kl(javaslam.prob.Gaussian)"><CODE>kl</CODE></A> divergence) from a separator potential to its new value (in
 nats) after the message is passed is larger than
 <code>significance</code>.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../javaslam/tjt/JunctionTree.Cluster.html#distributeEvidence(javaslam.tjt.JunctionTree.Cluster, double)"><CODE>JunctionTree.Cluster.distributeEvidence(JunctionTree.Cluster,double)</CODE></A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="JunctionTree()"><!-- --></A><H3>
JunctionTree</H3>
<PRE>
public <B>JunctionTree</B>()</PRE>
<DL>
<DD>Default constructor.  <code>significance</code> is initialized to
 <code>-1.0</code> so that all messages will be passed.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="setSignificance(double)"><!-- --></A><H3>
setSignificance</H3>
<PRE>
public void <B>setSignificance</B>(double&nbsp;s)</PRE>
<DL>
<DD>Sets a threshold used in adaptive message passing.  If
 <code>s</code> is non-negative, then when distributing evidence
 from a cluster, messages are only propagated while the
 differential relative entropy (or <A HREF="../../javaslam/prob/Gaussian.html#kl(javaslam.prob.Gaussian)"><CODE>kl</CODE></A> divergence) from a separator potential to its
 new value (in nats) after the message is passed is larger than
 <code>s</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>s</CODE> - the new threshold value<DT><B>See Also:</B><DD><A HREF="../../javaslam/tjt/JunctionTree.Cluster.html#distributeEvidence(javaslam.tjt.JunctionTree.Cluster, double)"><CODE>JunctionTree.Cluster.distributeEvidence(JunctionTree.Cluster,double)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="contains(javaslam.prob.Variable)"><!-- --></A><H3>
contains</H3>
<PRE>
public boolean <B>contains</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Returns <code>true</code> if this junction tree contains the
 supplied variable.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getVariables()"><!-- --></A><H3>
getVariables</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A> <B>getVariables</B>()</PRE>
<DL>
<DD>Gets an unmodifiable set of the <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in
 this junction tree.  The iteration order of this set is the order
 in which the variables were added to the juntion tree.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getClusters()"><!-- --></A><H3>
getClusters</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A> <B>getClusters</B>()</PRE>
<DL>
<DD>Returns a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A>s of the <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>JunctionTree.Cluster</CODE></A>s of this
 junction tree.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A>s of the <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>JunctionTree.Cluster</CODE></A>s
         of this junction tree.</DL>
</DD>
</DL>
<HR>

<A NAME="remove(javaslam.prob.Variable)"><!-- --></A><H3>
remove</H3>
<PRE>
protected void <B>remove</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Removes a variable from this junction tree.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable to be removed
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> - if <code>var</code> is present in any 
                                  cluster of the junction tree</DL>
</DD>
</DL>
<HR>

<A NAME="add(javaslam.prob.Variable)"><!-- --></A><H3>
add</H3>
<PRE>
protected void <B>add</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Adds a variable to this junction tree.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable to be added</DL>
</DD>
</DL>
<HR>

<A NAME="rename(javaslam.prob.Variable, javaslam.prob.Variable)"><!-- --></A><H3>
rename</H3>
<PRE>
public void <B>rename</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var,
                   <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;subst)</PRE>
<DL>
<DD>Renames a variable in this junction tree.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the original variable<DD><CODE>subst</CODE> - the variable substituted for the original variable
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> - if <code>var</code> and
         <code>subst</code> have differing dimensions</DL>
</DD>
</DL>
<HR>

<A NAME="getClustersWith(javaslam.prob.Variable)"><!-- --></A><H3>
getClustersWith</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A> <B>getClustersWith</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Returns an unmodifiable set of <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s
 containing the supplied variable.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the set of <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s of this junction tree
         that contain <code>var</code> or <code>null</code> if 
         <code>var</code> is not in the junction tree</DL>
</DD>
</DL>
<HR>

<A NAME="getCover(java.util.Set)"><!-- --></A><H3>
getCover</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>getCover</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</PRE>
<DL>
<DD>Returns the smallest cluster containing the supplied variables, or 
 <code>null</code> if there is no such cluster.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - a set of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s
<DT><B>Returns:</B><DD>the smallest cluster containing <code>vars</code> or 
         <code>null</code> if there is no such cluster</DL>
</DD>
</DL>
<HR>

<A NAME="times(javaslam.prob.Gaussian, javaslam.tjt.JunctionTree.Cluster)"><!-- --></A><H3>
times</H3>
<PRE>
public void <B>times</B>(<A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A>&nbsp;p,
                  <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;cluster)</PRE>
<DL>
<DD>Multiplies a new potential into a particular cluster of this
 junction tree and restores validity (but not consistency).  If
 the supplied potential acts on variables that are not yet present
 in the junction tree, these variables are first added to the
 junction tree.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>p</CODE> - the potential to be multiplied in<DD><CODE>cluster</CODE> - the cluster into which it should be multiplied</DL>
</DD>
</DL>
<HR>

<A NAME="times(javaslam.prob.Gaussian)"><!-- --></A><H3>
times</H3>
<PRE>
public <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>times</B>(<A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A>&nbsp;p)</PRE>
<DL>
<DD>Multiplies a new potential into the junction tree and restores
 validity (but not consistency).  If the supplied potential acts
 on variables that are not yet present in the junction tree, these
 variables are first added to the junction tree.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>p</CODE> - the potential to be multiplied in
<DT><B>Returns:</B><DD>the cluster into which <code>p</code> was multiplied</DL>
</DD>
</DL>
<HR>

<A NAME="enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><!-- --></A><H3>
enlarge</H3>
<PRE>
protected void <B>enlarge</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c,
                       <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Extends the supplied cluster so that it contains the supplied
 variable <i>without preserving consistency or the
 running-intersection property</i>.  

 <p><i>It is part of the contract of this class that whenever a
 variable is added to a cluster, this method must be
 invoked.</i></p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable to be added to the cluster<DT><B>See Also:</B><DD><A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend(JunctionTree.Cluster,Variable)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="reduce(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><!-- --></A><H3>
reduce</H3>
<PRE>
protected void <B>reduce</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c,
                      <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Reduces the supplied cluster so that it no longer contains the
 supplied variable.  The cluster potential is updated by
 marginalizing out this variables as well.  This method preserves
 consistency, but it makes no attempt to ensure the running
 intersection property; that property will only persist if
 <code>c</code> is a leaf of the subtree induced by
 <code>var</code>.

 <p><i>It is part of the contract of this class that whenever a
 variable is removed from a cluster, this method must be invoked;
 However, this method is not invoked if a cluster is removed from
 the junction tree entirely; in that case, <A HREF="../../javaslam/tjt/JunctionTree.html#remove(javaslam.tjt.JunctionTree.Cluster)"><CODE>remove</CODE></A> is called
 instead.</i></p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable to be added to the cluster</DL>
</DD>
</DL>
<HR>

<A NAME="remove(javaslam.tjt.JunctionTree.Cluster)"><!-- --></A><H3>
remove</H3>
<PRE>
protected void <B>remove</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c)</PRE>
<DL>
<DD>Removes a cluster from this junction tree.  This method only
 works if <code>c</code> is not connected to any other clusters.

 <p><i>It is part of the contract of this class that this method
 is invoked whenever a cluster is removed from the junction
 tree.</i></p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - the cluster to be removed
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> - if <code>c</code> is connected
                                  to any other clusters of the 
                                  junction tree</DL>
</DD>
</DL>
<HR>

<A NAME="newLeaf(javaslam.tjt.JunctionTree.Cluster)"><!-- --></A><H3>
newLeaf</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>newLeaf</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c)</PRE>
<DL>
<DD>Creates an empty cluster and attaches it as a leaf off of the
 supplied cluster.  This method is the <i>only</i> correct way to
 create a new junction tree cluster.</p>

 <p><i>It is part of the contract of this class that this method
 is invoked whenever a new cluster is added to the junction
 tree.</i></p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c</CODE> - the cluster to which the new cluster will be attached as
          a leaf; this may be <code>null</code> if the junction tree
          currently has no clusters
<DT><B>Returns:</B><DD>the new cluster
<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> - if <code>c == null</code>
                                  but this junction tree is not empty</DL>
</DD>
</DL>
<HR>

<A NAME="extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><!-- --></A><H3>
extend</H3>
<PRE>
protected void <B>extend</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;cluster,
                      <A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD><p>Minimally alters the structure and parameterization of the
 junction tree so that <code>cluster</code> covers
 <code>var</code> and validity and consistency are preserved.</p>

 <p><b>Algorithm:</b> In order to restore the running intersection
 property, the closest cluster <i>C</i> containing
 <code>var</code> is found, and <code>var</code> is added to all
 clusters (and separators) on the path to <i>C</i>.  Consistency
 is restored by passing flows <i>backwards</i> along this path.
 This operation can result in non-maximal clusters; these are
 subsequently detected by traversing the path and removed by
 cluster merging.</p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cluster</CODE> - a cluster of the junction tree to be extended<DD><CODE>var</CODE> - the variable to be added to the cluster</DL>
</DD>
</DL>
<HR>

<A NAME="bestCover(java.util.Set)"><!-- --></A><H3>
bestCover</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>bestCover</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</PRE>
<DL>
<DD>Returns the cluster whose intersection with the supplied set of
 variables is largest and whose size is the smallest.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A> of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s
<DT><B>Returns:</B><DD>the cluster whose intersection with <code>vars</code> is
         largest and whose size is the smallest</DL>
</DD>
</DL>
<HR>

<A NAME="bestCoverToExtend(java.util.Set)"><!-- --></A><H3>
bestCoverToExtend</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>bestCoverToExtend</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</PRE>
<DL>
<DD>Returns the cluster that, if <A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend</CODE></A>ed with the
 variables in <code>vars</code>, would cause the fewest number of
 cluster <A HREF="../../javaslam/tjt/JunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>enlarge</CODE></A>ments.  This differs from the result of <A HREF="../../javaslam/tjt/JunctionTree.html#bestCover(java.util.Set)"><CODE>bestCover(Set)</CODE></A> because it takes into account the cost of
 restoring the running intersection property.  (Note that there
 may be a better cluster to extend---in that its extension will
 increase the width of the junction tree by a smaller amount---but
 this criterion is a fairly good and cheap heuristic.)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A> of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s
<DT><B>Returns:</B><DD>the best choice of clusters to <A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend</CODE></A> with the 
         variables in <code>vars</code></DL>
</DD>
</DL>
<HR>

<A NAME="createCover(java.util.Set)"><!-- --></A><H3>
createCover</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>createCover</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars)</PRE>
<DL>
<DD>Updates this junction tree so that it has a cluster containing
 the supplied set of variables, while preserving validity and
 consistency.  The <A HREF="../../javaslam/tjt/JunctionTree.html#bestCoverToExtend(java.util.Set)"><CODE>bestCoverToExtend</CODE></A> is found and then is <A HREF="../../javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend</CODE></A>ed to
 cover each variable in <code>vars</code>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - the set of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s that must be covered
<DT><B>Returns:</B><DD>the cover created for <code>vars</code></DL>
</DD>
</DL>
<HR>

<A NAME="merge(javaslam.tjt.JunctionTree.JTEdge)"><!-- --></A><H3>
merge</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>merge</B>(<A HREF="../../javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>&nbsp;e)</PRE>
<DL>
<DD>Merges the two clusters that are incident to the supplied edge.
 The "to" cluster is merged into the "from" cluster.  All edges
 incident to the "to" cluster are "swung" over to the "from"
 cluster.  This method preserves validity and consistency.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>e</CODE> - the edge whose incident clusters are to be merged
<DT><B>Returns:</B><DD>the merged cluster (which is the same as <code>e.from</code>)</DL>
</DD>
</DL>
<HR>

<A NAME="mergeClustersWith(javaslam.prob.Variable)"><!-- --></A><H3>
mergeClustersWith</H3>
<PRE>
protected <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A> <B>mergeClustersWith</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Merges all clusters containing a particular variable.  The
 resulting merged cluster is returned.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable whose cover clusters are to be merged
<DT><B>Returns:</B><DD>the merged cluster</DL>
</DD>
</DL>
<HR>

<A NAME="marginalizeOut(javaslam.prob.Variable)"><!-- --></A><H3>
marginalizeOut</H3>
<PRE>
public void <B>marginalizeOut</B>(<A HREF="../.././javaslam/prob/Variable.html">Variable</A>&nbsp;var)</PRE>
<DL>
<DD>Marginalizes a variable out of this junction tree.  If the
 junction tree was previously consistent, then it will be
 consistent after this method is invoked.  All clusters containing
 the variable are merged together and then the variable is
 marginalized out of the resulting cluster.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>var</CODE> - the variable to be marginalized out</DL>
</DD>
</DL>
<HR>

<A NAME="passFlows()"><!-- --></A><H3>
passFlows</H3>
<PRE>
public void <B>passFlows</B>()</PRE>
<DL>
<DD>Restores consistency; all clusters into new potentials have been
 multiplied that have not yet distributed their evidence do so.
 If no new potentials have been multiplied into the junction tree
 since the last time this method was invoked, then this method
 does nothing.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMarginal(java.util.Set, boolean)"><!-- --></A><H3>
getMarginal</H3>
<PRE>
public <A HREF="../.././javaslam/prob/Gaussian.html">Gaussian</A> <B>getMarginal</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html">Set</A>&nbsp;vars,
                            boolean&nbsp;force)</PRE>
<DL>
<DD>Extracts the marginal from the junction tree.  This method
 first calls <A HREF="../../javaslam/tjt/JunctionTree.html#passFlows()"><CODE>passFlows()</CODE></A> to ensure the junction tree is
 consistent.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - the set of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s whose marginal 
              is to be computed<DD><CODE>force</CODE> - if <code>true</code>, then the junction tree is
              restructured if necessary to compute the marginal; 
              otherwise, <code>null</code> is returned if there 
              is no cover for <code>vars</code> in this junction tree.
<DT><B>Returns:</B><DD>a marginal potential over <code>vars</code> (in the
         canonical parameterization), or <code>null</code> if
         <code>force</code> is <code>false</code> and
         <code>vars</code> do not reside together in a cluster of
         the junction tree</DL>
</DD>
</DL>
<HR>

<A NAME="getMarginals(java.util.Collection)"><!-- --></A><H3>
getMarginals</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Map.html">Map</A> <B>getMarginals</B>(<A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Collection.html">Collection</A>&nbsp;vars)</PRE>
<DL>
<DD>Extracts a set of unary marginals from the junction tree without
 inverting any cluster potential more than once.  This method
 first calls <A HREF="../../javaslam/tjt/JunctionTree.html#passFlows()"><CODE>passFlows()</CODE></A> to ensure the junction tree is
 consistent.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>vars</CODE> - a collection of <A HREF="../../javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s, or 
         <code>null</code> to indicate all variables in this
         junction tree
<DT><B>Returns:</B><DD>a map whose keys are the (distinct) elements of
         <code>vars</code> and whose values are the corresponding 
         <A HREF="../../javaslam/prob/Gaussian.html"><CODE>Gaussian</CODE></A> marginals (in the moment parameterization)</DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/String.html">String</A> <B>toString</B>()</PRE>
<DL>
<DD>Returns a String representation of this junction tree.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html#toString()">toString</A></CODE> in class <CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Object.html">Object</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="checkValid()"><!-- --></A><H3>
checkValid</H3>
<PRE>
public void <B>checkValid</B>()</PRE>
<DL>
<DD>Tests to see if the junction tree is valid.  A <i>valid</i> junction 
 tree has three properties: 
 <ol>
   <li><i>potential property</i>: all potentials that have been 
       added to this junction tree are covered by at least one 
       cluster; (this is not checked)</li>
   <li><i>singly-connected property</i>: the graph is a tree; and</li>
   <li><i>running intersection property</i>: if <i>C<sub>1</sub></i> and
       <i>C<sub>2</sub></i> are clusters that contain the variable
       <i>x</i>, then all clusters (and separators) on the (unique) path
       between <i>C<sub>1</sub></i> and <i>C<sub>2</sub></i> also 
       contain <i>x</i>.</li>
 </ol>
 (This method is superfluous, since all public methods of this
 class preserve the validity of the junction tree.  It is provided
 as a debugging tool.)
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE><A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/InternalError.html">InternalError</A></CODE> - if this junction tree is invalid</DL>
</DD>
</DL>
<HR>

<A NAME="consistent()"><!-- --></A><H3>
consistent</H3>
<PRE>
public boolean <B>consistent</B>()</PRE>
<DL>
<DD>Tests to see if the junction tree is consistent.  A junction tree
 is <i>consistent</i> if each separator potential agrees with (the
 appropriate marginal of) its incident clusters' potentials.
 (This method is provided as a debugging tool.)
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="parents()"><!-- --></A><H3>
parents</H3>
<PRE>
public int[] <B>parents</B>()</PRE>
<DL>
<DD>Returns a directed representation of the junction tree.  An array
 of integer parent indices into the iteration order of the set
 returned by <A HREF="../../javaslam/tjt/JunctionTree.html#getClusters()"><CODE>getClusters()</CODE></A>.  The cluster
 whose parent index is <code>0</code> is the root.

 <p>This function is provided to facilitate the plotting of
 junction trees in Matlab.</p>
<P>
<DD><DL>

<DT><B>Returns:</B><DD>An array of integer parent indices into the iteration
         order of the set returned by
         <A HREF="../../javaslam/tjt/JunctionTree.html#getClusters()"><CODE>getClusters()</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="link(javaslam.tjt.JunctionTree.Cluster, javaslam.tjt.JunctionTree.Cluster)"><!-- --></A><H3>
link</H3>
<PRE>
protected void <B>link</B>(<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c1,
                    <A HREF="../../javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>&nbsp;c2)</PRE>
<DL>
<DD>Adds a new pair of edges between the supplied clusters.  The
 separator is initialized to unity.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>c1</CODE> - a cluster<DD><CODE>c2</CODE> - another cluster</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../javaslam/filter/JTFilter.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../javaslam/tjt/JunctionTree.Cluster.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="JunctionTree.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

</BODY>
</HTML>
