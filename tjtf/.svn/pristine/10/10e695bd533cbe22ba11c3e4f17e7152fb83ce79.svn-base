<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Tue Aug 19 09:38:06 PDT 2003 -->
<TITLE>
Index
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="Index";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Index</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="index-all.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<A HREF="#_A_">A</A> <A HREF="#_B_">B</A> <A HREF="#_C_">C</A> <A HREF="#_D_">D</A> <A HREF="#_E_">E</A> <A HREF="#_F_">F</A> <A HREF="#_G_">G</A> <A HREF="#_H_">H</A> <A HREF="#_I_">I</A> <A HREF="#_J_">J</A> <A HREF="#_K_">K</A> <A HREF="#_L_">L</A> <A HREF="#_M_">M</A> <A HREF="#_N_">N</A> <A HREF="#_O_">O</A> <A HREF="#_P_">P</A> <A HREF="#_Q_">Q</A> <A HREF="#_R_">R</A> <A HREF="#_S_">S</A> <A HREF="#_T_">T</A> <A HREF="#_U_">U</A> <A HREF="#_V_">V</A> <A HREF="#_W_">W</A> <A HREF="#_X_">X</A> <A HREF="#_Y_">Y</A> <HR>
<A NAME="_A_"><!-- --></A><H2>
<B>A</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#a"><B>a</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The constant term in the affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#A"><B>A</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>The linear coefficient.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html"><B>AbstractSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>.<DD>An abstract class extended by classes that implement filters for
 the Simultaneous Localization and Mapping (SLAM) problem.<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#AbstractSLAMFilter(int)"><B>AbstractSLAMFilter(int)</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/Flops.html#add(int, int)"><B>add(int, int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to add two
 <code>n</code>-by-<code>m</code> matrices.
<DT><A HREF="javaslam/util/ListSet.html#add(int, java.lang.Object)"><B>add(int, Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Inserts the specified element at the specified position in this set
 (optional operation).
<DT><A HREF="javaslam/util/ListSet.html#add(java.lang.Object)"><B>add(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Appends the specified element to the end of this set if it is not
 already in the set (optional operation).
<DT><A HREF="javaslam/tjt/JunctionTree.html#add(javaslam.prob.Variable)"><B>add(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Adds a variable to this junction tree.
<DT><A HREF="javaslam/util/ListSet.html#addAll(java.util.Collection)"><B>addAll(Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Appends all of the elements in the specified collection to the
 end of this set, in the order that they are returned by the
 specified collection's iterator.
<DT><A HREF="javaslam/util/ListSet.html#addAll(int, java.util.Collection)"><B>addAll(int, Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Inserts all of the elements in the specified collection into this
 set at the specified position (optional operation).
<DT><A HREF="javaslam/tjt/graph/Node.html#addEdge(javaslam.tjt.graph.Edge)"><B>addEdge(Edge)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Adds an edge from this node to another node.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#addLandmark(int, int)"><B>addLandmark(int, int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Adds a new landmark to the map and returns its state variable.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#addLandmark(int, int)"><B>addLandmark(int, int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Adds a new landmark to the map and returns its state variable.
<DT><A HREF="javaslam/slam/SLAMFilter.html#addLandmark(int, int)"><B>addLandmark(int, int)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Adds a new landmark to the map and returns its state variable.
<DT><A HREF="javaslam/util/ListSet.html#asList()"><B>asList()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns an unmodifiable view of this set as a list.
</DL>
<HR>
<A NAME="_B_"><!-- --></A><H2>
<B>B</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#B"><B>B</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The linear coefficient in the affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/util/Flops.html#backSubst(int, int, int)"><B>backSubst(int, int, int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is upper triangular.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#bearing"><B>bearing</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>The noisy bearing measurement.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#BEARING_NOISE"><B>BEARING_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#BEARING_NOISE"><B>BEARING_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/tjt/JunctionTree.html#bestCover(java.util.Set)"><B>bestCover(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns the cluster whose intersection with the supplied set of
 variables is largest and whose size is the smallest.
<DT><A HREF="javaslam/tjt/JunctionTree.html#bestCoverToExtend(java.util.Set)"><B>bestCoverToExtend(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns the cluster that, if <A HREF="javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>extend</CODE></A>ed with the
 variables in <code>vars</code>, would cause the fewest number of
 cluster <A HREF="javaslam/tjt/JunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><CODE>enlarge</CODE></A>ments.
<DT><A HREF="javaslam/prob/Sample.html#beta(double, double, java.util.Random)"><B>beta(double, double, Random)</B></A> - 
Static method in class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>
<DD>Returns a sample from Beta(a, b).
<DT><A HREF="javaslam/prob/Sample.html#binomial(int, double, java.util.Random)"><B>binomial(int, double, Random)</B></A> - 
Static method in class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>
<DD>Returns a sample from Binomial(n, p).
<DT><A HREF="javaslam/util/TJTF.html#blather"><B>blather</B></A> - 
Static variable in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>A flag indicating whether mundane status messages should be
 displayed.
<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html"><B>BreadthFirstTraversal</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>.<DD>An iterator that traverses the nodes of a graph in breadth-first
 (siblings before children) order.<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html#BreadthFirstTraversal(javaslam.tjt.graph.Node)"><B>BreadthFirstTraversal(Node)</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>
<DD>Constructor.
</DL>
<HR>
<A NAME="_C_"><!-- --></A><H2>
<B>C</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/JunctionTree.html#checkValid()"><B>checkValid()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Tests to see if the junction tree is valid.
<DT><A HREF="javaslam/util/Flops.html#chol(int)"><B>chol(int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the Cholesky decomposition of an <code>n</code>-by-<code>n</code>
 symmetric positive definite matrix.
<DT><A HREF="javaslam/prob/Gaussian.html#clear()"><B>clear()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Clears all variables from this Gaussian.
<DT><A HREF="javaslam/util/ListSet.html#clear()"><B>clear()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Removes all of the elements from this set (optional operation).
<DT><A HREF="javaslam/util/PriorityQueue.html#clear()"><B>clear()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Removes all items from this queue.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#clone(javaslam.tjt.JunctionTree.Cluster)"><B>clone(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Duplicates the supplied cluster and attaches the duplicate as a
 leaf off of the original cluster.
<DT><A HREF="javaslam/tjt/JunctionTree.html#clusters"><B>clusters</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>The <A HREF="javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s in this junction tree.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#clustersBySize"><B>clustersBySize</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>A priority queue of clusters prioritized by their size.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#collectEvidence(javaslam.tjt.JunctionTree.Cluster, boolean)"><B>collectEvidence(JunctionTree.Cluster, boolean)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Collects evidence to this cluster.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#compareTo(java.lang.Object)"><B>compareTo(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>Compares this object with the specified object for order.
<DT><A HREF="javaslam/util/ListSet.html#complement(java.util.Set)"><B>complement(Set)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Creates an ordered set that is the complement of this set in the
 supplied set of objects.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#computeError()"><B>computeError()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Computes the approximation error introduced by a variable
 contraction along an edge <code>e</code> = <i>C<sub>i</sub></i>
 -> <i>C<sub>j</sub></i>.
<DT><A HREF="javaslam/prob/Gaussian.html#condition(javaslam.util.ListSet, Jama.Matrix, boolean)"><B>condition(ListSet, Matrix, boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Conditions on a subset of the variables in this Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.html#consistent()"><B>consistent()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Tests to see if the junction tree is consistent.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#consistent()"><B>consistent()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Returns <code>true</code> iff this edge is consistent.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#contains(int)"><B>contains(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Return <code>true</code> if this filter contains the landmark
 with the supplied identifier.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#contains(int)"><B>contains(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Return <code>true</code> if this filter contains the landmark
 with the supplied identifier.
<DT><A HREF="javaslam/slam/SLAMFilter.html#contains(int)"><B>contains(int)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Return <code>true</code> if this filter contains the landmark
 with the supplied identifier.
<DT><A HREF="javaslam/util/ListSet.html#contains(java.lang.Object)"><B>contains(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns <tt>true</tt> if this set contains the specified element.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#contains(java.util.Set)"><B>contains(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns <code>true</code> if this cluster contains the supplied
 set of variables.
<DT><A HREF="javaslam/tjt/JunctionTree.html#contains(javaslam.prob.Variable)"><B>contains(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns <code>true</code> if this junction tree contains the
 supplied variable.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#contains(javaslam.prob.Variable)"><B>contains(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns <code>true</code> if this cluster contains the supplied
 variable.
<DT><A HREF="javaslam/util/ListSet.html#containsAll(java.util.Collection)"><B>containsAll(Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns <tt>true</tt> if this set contains all of the elements of the
 specified collection.
<DT><A HREF="javaslam/util/ListSet.html#containsAny(java.util.Collection)"><B>containsAny(Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns <tt>true</tt> if this set contains any of the elements of the
 specified collection.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#contract(javaslam.prob.Variable)"><B>contract(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Contracts <code>var</code> from all clusters but one and returns
 that cluster.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#contractTo(javaslam.prob.Variable, javaslam.tjt.JunctionTree.Cluster)"><B>contractTo(Variable, JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Contracts <code>var</code> from all clusters but <code>cluster</code>
 (which must contain <code>var</code>).
<DT><A HREF="javaslam/util/Flops.html#count()"><B>count()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Returns the number of floating point operations performed by code
 in the <code>tjtf</code> package since the virtual machine was
 started.
<DT><A HREF="javaslam/util/Flops.html#count(long)"><B>count(long)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Increments the flop counter by <code>f</code>.
<DT><A HREF="javaslam/util/Flops.html#countFlops"><B>countFlops</B></A> - 
Static variable in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>A flag that determines whether <A HREF="javaslam/util/Flops.html#count(long)"><CODE>Flops.count(long)</CODE></A> will
 increment the flop count.
<DT><A HREF="javaslam/tjt/JunctionTree.html#createCover(java.util.Set)"><B>createCover(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Updates this junction tree so that it has a cluster containing
 the supplied set of variables, while preserving validity and
 consistency.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#current"><B>current</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>The most recently returned node, or <code>null</code> if <A HREF="javaslam/tjt/graph/Traversal.html#next()"><CODE>next()</CODE></A> has not yet been called.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#current()"><B>current()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns the current node without advancing the iterator.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#cycle"><B>cycle</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>If <code>true</code>, then this iterator has traversed a node
 more than once.
</DL>
<HR>
<A NAME="_D_"><!-- --></A><H2>
<B>D</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/graph/NodeFilter.html#data"><B>data</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/NodeFilter.html">NodeFilter</A>
<DD>An arbitrary piece of data used by the predicate.
<DT><A HREF="javaslam/prob/Sample.html#DBL_EPSILON"><B>DBL_EPSILON</B></A> - 
Static variable in class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>
<DD>Analogous to <tt>eps</tt> in Matlab.
<DT><A HREF="javaslam/util/TJTF.html#debug"><B>debug</B></A> - 
Static variable in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>A flag indicating whether special (expensive) checks should be
 made to ensure that everything is operating correctly.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#DEL_X"><B>DEL_X</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#DEL_X"><B>DEL_X</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#DEL_Y"><B>DEL_Y</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#DEL_Y"><B>DEL_Y</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html"><B>DepthFirstTraversal</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>.<DD>An iterator that traverses the nodes of a graph in depth-first
 (children before siblings) order.<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html#DepthFirstTraversal(javaslam.tjt.graph.Node)"><B>DepthFirstTraversal(Node)</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/PriorityQueue.html#dequeue()"><B>dequeue()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Dequeues the item with the highest priority.
<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html#dequeue()"><B>dequeue()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>
<DD>Dequeues a node to visit.
<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html#dequeue()"><B>dequeue()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>
<DD>Dequeues a node to visit.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#dequeue()"><B>dequeue()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Dequeues a node to visit.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#descendants"><B>descendants</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>If not <code>null</code>, this is a list of <A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html"><CODE>ThinJunctionTree.Contraction</CODE></A>s that must first be executed
 before this contraction can be executed.
<DT><A HREF="javaslam/util/Flops.html#det(int, boolean)"><B>det(int, boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the determinant of an <code>n</code>-by-<code>n</code> matrix
 that is possibly symmetric positive definite.
<DT><A HREF="javaslam/prob/Variable.html#dim"><B>dim</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>The dimension of this variable.
<DT><A HREF="javaslam/prob/Variable.html#dimension(java.util.Set)"><B>dimension(Set)</B></A> - 
Static method in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Computes the sum dimension of a set of <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#distributeEvidence(javaslam.tjt.JunctionTree.Cluster)"><B>distributeEvidence(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Distributes evidence from this cluster.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#distributeEvidence(javaslam.tjt.JunctionTree.Cluster, double)"><B>distributeEvidence(JunctionTree.Cluster, double)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Distributes evidence from this cluster so long as the
 propagated messages are having a significant effect on the
 belief state.
<DT><A HREF="javaslam/prob/Gaussian.html#div(javaslam.prob.Gaussian, boolean)"><B>div(Gaussian, boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Divides two Gaussians (in the canonical parameterization).
<DT><A HREF="javaslam/prob/Gaussian.html#doubling"><B>doubling</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>If <code>true</code>, then the capacity (i.e., the <i>actual</i>
 dimension of <A HREF="javaslam/prob/Gaussian.html#vP"><CODE>Gaussian.vP</CODE></A> and <A HREF="javaslam/prob/Gaussian.html#mP"><CODE>Gaussian.mP</CODE></A>) of this Gaussian is
 doubled when it must be increased to accomodate new variables;
 otherwise it is increased only enough to admit the new variables.
</DL>
<HR>
<A NAME="_E_"><!-- --></A><H2>
<B>E</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#e"><B>e</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>The edge along which the variable is to be contracted.
<DT><A HREF="javaslam/tjt/graph/Edge.html"><B>Edge</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>.<DD>A directed edge in a graph.<DT><A HREF="javaslam/tjt/graph/Traversal.html#edge()"><B>edge()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns the edge traversed to arrive at the current node.
<DT><A HREF="javaslam/tjt/graph/Edge.html#Edge(javaslam.tjt.graph.Node, javaslam.tjt.graph.Node)"><B>Edge(Node, Node)</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>Default constructor.
<DT><A HREF="javaslam/tjt/graph/Node.html#edges"><B>edges</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>A mapping from neighbor <A HREF="javaslam/tjt/graph/Node.html"><CODE>Node</CODE></A>s to the <A HREF="javaslam/tjt/graph/Edge.html"><CODE>Edge</CODE></A>s to them.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#edges"><B>edges</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>A mapping from each node to the <A HREF="javaslam/tjt/graph/Edge.html"><CODE>Edge</CODE></A> used to arrive
 at that node (most recently).
<DT><A HREF="javaslam/tjt/graph/Node.html#edges()"><B>edges()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Returns (an unmodifiable view of) the set of <A HREF="javaslam/tjt/graph/Edge.html"><CODE>Edge</CODE></A>s
 incident from this node.
<DT><A HREF="javaslam/util/PriorityQueue.html#elements"><B>elements</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>A list of <A HREF="javaslam/util/PriorityQueue.QueueElement.html"><CODE>QueueElement</CODE></A> objects ordered by
 their priorities.
<DT><A HREF="javaslam/tjt/JunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>enlarge(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Extends the supplied cluster so that it contains the supplied
 variable <i>without preserving consistency or the
 running-intersection property</i>.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#enlarge(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>enlarge(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Extends the supplied cluster so that it contains the supplied
 variable <i>without preserving consistency or the running-intersection 
 property</i>.
<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html#enqueue(javaslam.tjt.graph.Node)"><B>enqueue(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>
<DD>Enqueues a node for later visit.
<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html#enqueue(javaslam.tjt.graph.Node)"><B>enqueue(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>
<DD>Enqueues a node for later visit.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#enqueue(javaslam.tjt.graph.Node)"><B>enqueue(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Enqueues a node for later visit.
<DT><A HREF="javaslam/util/PriorityQueue.html#enqueue(java.lang.Object, java.lang.Comparable)"><B>enqueue(Object, Comparable)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Enqueues a new item with the supplied priority.
<DT><A HREF="javaslam/prob/Gaussian.html#entropy()"><B>entropy()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Computes the differential entropy <i>H</i> of this Gaussian.
<DT><A HREF="javaslam/prob/Variable.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Finalizes the definition of <CODE>equals</CODE>
 so that two variable references are equal iff they refer to the
 same object.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>Returns <code>true</code> if two elements are the same, which
 is true only when the corresponding items are equal.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Returns <code>true</code> if this and the supplied object are
 equal.
<DT><A HREF="javaslam/tjt/graph/Edge.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>Redefines <code>equals</code> so that two edges are equal if
 their termini are the equal.
<DT><A HREF="javaslam/tjt/graph/Node.html#equals(java.lang.Object)"><B>equals(Object)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Finalizes the definition of <code>equals</code> so that two nodes
 are equal iff they are the same object.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#err"><B>err</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>The approximation error induced by this contraction.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#error()"><B>error()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Returns the approximation error that will result if this
 contraction is executed, which is the relative entropy (or
 Kullback-Lieblier divergence) from the original distribution to
 the resulting distribution.
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/filter/VectorFunction.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/VectorFunction.html">VectorFunction</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#evaluate(double[])"><B>evaluate(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Evaluates this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.html"><B>ExampleModel</B></A> - class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>.<DD>A <font size="-1">SLAM</font> model for a robot that can rotate
 about its vertical axis and translate along its current heading and
 which receives differential odometry measurements and range-bearing
 landmark measurements.<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html"><B>ExampleModel.InverseMeasurementModel</B></A> - class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>.<DD>The inverse landmark measurement model of the robot.<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#ExampleModel.InverseMeasurementModel(double[])"><B>ExampleModel.InverseMeasurementModel(double[])</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html"><B>ExampleModel.LandmarkMeasurementModel</B></A> - class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>.<DD>The landmark measurement model of the robot.<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#ExampleModel.LandmarkMeasurementModel()"><B>ExampleModel.LandmarkMeasurementModel()</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html"><B>ExampleModel.MotionModel</B></A> - class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>.<DD>The motion model of the robot.<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#ExampleModel.MotionModel(double[])"><B>ExampleModel.MotionModel(double[])</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html"><B>ExampleModel.OdometryModel</B></A> - class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>.<DD>The odometry model of the robot.<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#ExampleModel.OdometryModel()"><B>ExampleModel.OdometryModel()</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.html#ExampleModel()"><B>ExampleModel()</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#execute()"><B>execute()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Executes the edge contraction.
<DT><A HREF="javaslam/util/Flops.html#exp()"><B>exp()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the exponential of a number.
<DT><A HREF="javaslam/tjt/JunctionTree.html#extend(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>extend(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Minimally alters the structure and parameterization of the
 junction tree so that <code>cluster</code> covers
 <code>var</code> and validity and consistency are preserved.
<DT><A HREF="javaslam/prob/Gaussian.html#extend(java.util.Set)"><B>extend(Set)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Extends this Gaussian to include a new set of variables.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#extend(java.util.Set)"><B>extend(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Extends this cluster to contain the supplied set of <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s.
<DT><A HREF="javaslam/filter/ExtendedTransformation.html"><B>ExtendedTransformation</B></A> - class javaslam.filter.<A HREF="javaslam/filter/ExtendedTransformation.html">ExtendedTransformation</A>.<DD>The extended transformation for linearizing functions with
 Gaussian-distributed inputs.<DT><A HREF="javaslam/filter/ExtendedTransformation.html#ExtendedTransformation(javaslam.filter.NoisyVectorFunction, javaslam.prob.Gaussian)"><B>ExtendedTransformation(NoisyVectorFunction, Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/ExtendedTransformation.html">ExtendedTransformation</A>
<DD>Constructor.
<DT><A HREF="javaslam/filter/ExtendedVectorFunction.html"><B>ExtendedVectorFunction</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/ExtendedVectorFunction.html">ExtendedVectorFunction</A>.<DD>A vector-valued function that takes a vector input and which can
 compute its Jacobian at any input.</DL>
<HR>
<A NAME="_F_"><!-- --></A><H2>
<B>F</B></H2>
<DL>
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#f"><B>f</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>&nbsp;
<DT><A HREF="javaslam/filter/ExtendedTransformation.html#factory"><B>factory</B></A> - 
Static variable in class javaslam.filter.<A HREF="javaslam/filter/ExtendedTransformation.html">ExtendedTransformation</A>
<DD>A factory for creating linearizations using the extended
 transformation.
<DT><A HREF="javaslam/filter/UnscentedTransformation.html#factory"><B>factory</B></A> - 
Static variable in class javaslam.filter.<A HREF="javaslam/filter/UnscentedTransformation.html">UnscentedTransformation</A>
<DD>A factory for creating linearizations using the unscented
 transformation.
<DT><A HREF="javaslam/filter/LinearizedFilter.html#filter"><B>filter</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>
<DD>The underlying linear-Gaussian filter.
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#filter"><B>filter</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>The underlying filter.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#filter"><B>filter</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>The underlying linear-Gaussian SLAM filter.
<DT><A HREF="javaslam/filter/Filter.html"><B>Filter</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>.<DD>A linear-Gaussian filter.<DT><A HREF="javaslam/util/Flops.html#flops"><B>flops</B></A> - 
Static variable in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>A counter of the number of floating-point operations performed.
<DT><A HREF="javaslam/util/Flops.html"><B>Flops</B></A> - class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>.<DD>A class containing methods for counting floating point operations.<DT><A HREF="javaslam/util/Flops.html#Flops()"><B>Flops()</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>&nbsp;
<DT><A HREF="javaslam/util/Flops.html#forwardSubst(int, int, int)"><B>forwardSubst(int, int, int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> via back substitution in the matrix equation <i>AX</i> =
 <i>B</i> where <i>A</i> is unit lower triangular.
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#frame(javaslam.slam.LGSLAMFilterCanvas)"><B>frame(LGSLAMFilterCanvas)</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>&nbsp;
<DT><A HREF="javaslam/tjt/graph/Edge.html#from"><B>from</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>The start of this edge.
</DL>
<HR>
<A NAME="_G_"><!-- --></A><H2>
<B>G</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#G"><B>G</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The covariance of the white noise variable <b>w</b> in the
 affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/prob/Sample.html#gamma(double, java.util.Random)"><B>gamma(double, Random)</B></A> - 
Static method in class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>
<DD>Samples from the Gamma(a) distribution.
<DT><A HREF="javaslam/prob/Gaussian.html"><B>Gaussian</B></A> - class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>.<DD>A Gaussian probability density over a set of vector-valued
 variables.<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(boolean)"><B>Gaussian(boolean)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Default constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(boolean, int)"><B>Gaussian(boolean, int)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Default constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(javaslam.prob.Gaussian)"><B>Gaussian(Gaussian)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Copy constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(javaslam.prob.Gaussian, javaslam.prob.Gaussian)"><B>Gaussian(Gaussian, Gaussian)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Separator Gaussian constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(javaslam.util.ListSet, double[], double[][], boolean)"><B>Gaussian(ListSet, double[], double[][], boolean)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(javaslam.util.ListSet, Jama.Matrix, Jama.Matrix, boolean)"><B>Gaussian(ListSet, Matrix, Matrix, boolean)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#Gaussian(java.util.Set, boolean)"><B>Gaussian(Set, boolean)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Creates an uninformative Gaussian density over the supplied set
 of variables.
<DT><A HREF="javaslam/util/ListSet.html#get(int)"><B>get(int)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns the element at the specified position in this set.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getClusters()"><B>getClusters()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns a <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A>s of the <A HREF="javaslam/tjt/JunctionTree.Cluster.html"><CODE>JunctionTree.Cluster</CODE></A>s of this
 junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getClustersWith(javaslam.prob.Variable)"><B>getClustersWith(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns an unmodifiable set of <A HREF="javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s
 containing the supplied variable.
<DT><A HREF="javaslam/filter/Linearization.html#getCoefficient()"><B>getCoefficient()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns the linear coefficient <i>B</i> in the affine-Gaussian
 approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/filter/Linearization.html#getCoefficient(javaslam.prob.Variable)"><B>getCoefficient(Variable)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns the submatrix of <i>B</i> in the affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 

 that corresponds to the subvariable <code>u</code> of <b>x</b>.
<DT><A HREF="javaslam/filter/InformationFilter.html#getConditionalGaussian(javaslam.util.ListSet, Jama.Matrix, Jama.Matrix, Jama.Matrix, Jama.Matrix)"><B>getConditionalGaussian(ListSet, Matrix, Matrix, Matrix, Matrix)</B></A> - 
Static method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Creates a linear-Gaussian measurement potential.
<DT><A HREF="javaslam/filter/Linearization.html#getConstantTerm()"><B>getConstantTerm()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns the constant term in the affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#getContraction(javaslam.tjt.JunctionTree.JTEdge, javaslam.prob.Variable)"><B>getContraction(JunctionTree.JTEdge, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Creates a variable contraction of the supplied variable along the
 supplied edge.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getCover(java.util.Set)"><B>getCover(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns the smallest cluster containing the supplied variables, or 
 <code>null</code> if there is no such cluster.
<DT><A HREF="javaslam/prob/Gaussian.html#getDimension()"><B>getDimension()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets the sum of the dimensions of all variables bound by this
 Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getDimension()"><B>getDimension()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns the dimension of this cluster, which is the dimension
 of its potential.
<DT><A HREF="javaslam/filter/InformationFilter.html#getDistribution()"><B>getDistribution()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Returns the current filtered belief state.
<DT><A HREF="javaslam/filter/KalmanFilter.html#getDistribution()"><B>getDistribution()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Returns the current filtered belief state.
<DT><A HREF="javaslam/filter/Linearization.html#getDistribution()"><B>getDistribution()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns a Gaussian approximation of the distribution over
 the function's inputs and output.
<DT><A HREF="javaslam/tjt/graph/Node.html#getEdge(javaslam.tjt.graph.Node)"><B>getEdge(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Gets the edge from this node to the supplied node; if no such edge
 exists, <code>null</code> is returned.
<DT><A HREF="javaslam/prob/Gaussian.html#getEta(javaslam.util.ListSet)"><B>getEta(ListSet)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets a subvector of <font face="Symbol">h</font>.
<DT><A HREF="javaslam/filter/ExtendedTransformation.html#getFactory()"><B>getFactory()</B></A> - 
Static method in class javaslam.filter.<A HREF="javaslam/filter/ExtendedTransformation.html">ExtendedTransformation</A>
<DD>Returns a handle on a factory for creating linearizations using
 the extended transformation.
<DT><A HREF="javaslam/filter/UnscentedTransformation.html#getFactory()"><B>getFactory()</B></A> - 
Static method in class javaslam.filter.<A HREF="javaslam/filter/UnscentedTransformation.html">UnscentedTransformation</A>
<DD>Returns a handle on a factory for creating linearizations using
 the unscented transformation.
<DT><A HREF="javaslam/prob/Gaussian.html#getIndices(javaslam.util.ListSet)"><B>getIndices(ListSet)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets an array of indices into the parameters that corresponds to
 the supplied set of variables.
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/filter/VectorFunction.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/VectorFunction.html">VectorFunction</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#getInputDim()"><B>getInputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Returns the input dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.html#getInverseMeasurementModel(double[])"><B>getInverseMeasurementModel(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the landmark observation model.
<DT><A HREF="javaslam/slam/Model.html#getInverseMeasurementModel(double[])"><B>getInverseMeasurementModel(double[])</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the inverse of the landmark observation model (at
 <b>z</b><sub><i>t</i></sub><sup><i>i</i></sup> = <code>z</code>)
 with respect to the landmark state:
 <nobr><b>l</b><sub><i>j</i></sub> = <i>h</i><sup>-1</sup><sub>
 <code>z</code></sub>(<b>x</b><sub><i>t</i></sub>,
 <b>u</b>)</nobr>.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getJunctionTree()"><B>getJunctionTree()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns the junction tree this cluster resides in.
<DT><A HREF="javaslam/filter/JTFilter.html#getJunctionTree()"><B>getJunctionTree()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Gets the junction tree representation of the belief state.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getJunctionTree()"><B>getJunctionTree()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Gets the junction tree representation of the belief state.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#getKalmanFilter()"><B>getKalmanFilter()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Returns the underlying Kalman filter used by this SLAM filter.
<DT><A HREF="javaslam/prob/Gaussian.html#getLambda(javaslam.util.ListSet, javaslam.util.ListSet)"><B>getLambda(ListSet, ListSet)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets a submatrix of <font face="Symbol">L</font>.
<DT><A HREF="javaslam/slam/ExampleModel.html#getLandmarkDim()"><B>getLandmarkDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the dimension of each landmark's state.
<DT><A HREF="javaslam/slam/Model.html#getLandmarkDim()"><B>getLandmarkDim()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the dimension of each landmark's state.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getLandmarkEstimate(int)"><B>getLandmarkEstimate(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Returns the filtered estimate of a landmark's state.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getLandmarkEstimate(int)"><B>getLandmarkEstimate(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Returns the filtered estimate of a landmark's state.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getLandmarkEstimate(int)"><B>getLandmarkEstimate(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Returns the filtered estimate of a landmark's state.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getLandmarkEstimate(int)"><B>getLandmarkEstimate(int)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Returns the filtered estimate of a landmark's state.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getLandmarkId(javaslam.prob.Variable)"><B>getLandmarkId(Variable)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Gets the identifier associated with the supplied landmark state
 variable.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getLandmarkId(javaslam.prob.Variable)"><B>getLandmarkId(Variable)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Gets the identifier associated with the supplied landmark state
 variable.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getLandmarkId(javaslam.prob.Variable)"><B>getLandmarkId(Variable)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Gets the identifier associated with the supplied landmark state
 variable.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getLandmarkIds()"><B>getLandmarkIds()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Returns the IDs of landmarks known to this filter.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getLandmarkIds()"><B>getLandmarkIds()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Returns the IDs of landmarks known to this filter.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getLandmarkIds()"><B>getLandmarkIds()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Returns the IDs of landmarks known to this filter.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#getLandmarkMarginal(int)"><B>getLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Returns the filtered marginal potential over a landmark's state
 (in the moment parameterization).
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#getLandmarkMarginal(int)"><B>getLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Returns the filtered marginal potential over a landmark's state
 (in the moment parameterization).
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getLandmarkMarginal(int)"><B>getLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Returns the filtered marginal potential over a landmark's state
 (in the moment parameterization).
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getLandmarkMarginal(int)"><B>getLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Returns the filtered marginal potential over a landmark's state
 (in the moment parameterization).
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#getLandmarkMarginals(int[])"><B>getLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Given a collection of landmark state variables, this method
 returns the set of filtered marginal potentials over each
 individual landmark's state.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getLandmarkMarginals(int[])"><B>getLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Given a collection of landmark state variables, this method
 returns the set of filtered marginal potentials over each
 individual landmark's state.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getLandmarkMarginals(int[])"><B>getLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Given a collection of landmark state variables, this method
 returns the set of filtered marginal potentials over each
 individual landmark's state.
<DT><A HREF="javaslam/slam/ExampleModel.html#getLandmarkNoiseModel()"><B>getLandmarkNoiseModel()</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates a landmark measurement noise model using parameters
 specified by system properties or default values (when the
 properties are not defined).
<DT><A HREF="javaslam/slam/ExampleModel.html#getLandmarkNoiseModel(double, double, double)"><B>getLandmarkNoiseModel(double, double, double)</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates a landmark measurement noise model.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getLandmarkVariable(int)"><B>getLandmarkVariable(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Gets the state variable associated with the landmark with the
 supplied identifier.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getLandmarkVariable(int)"><B>getLandmarkVariable(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Gets the state variable associated with the landmark with the
 supplied identifier.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getLandmarkVariable(int)"><B>getLandmarkVariable(int)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Gets the state variable associated with the landmark with the
 supplied identifier.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getLGFilter()"><B>getLGFilter()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Returns the underlying linear-Gaussian filter, which can be used
 to access the filtered belief state.
<DT><A HREF="javaslam/filter/Filter.html#getMarginal(java.util.Set)"><B>getMarginal(Set)</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Extracts the filtered marginal distribution.
<DT><A HREF="javaslam/filter/InformationFilter.html#getMarginal(java.util.Set)"><B>getMarginal(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Extracts the filtered marginal distribution.
<DT><A HREF="javaslam/filter/JTFilter.html#getMarginal(java.util.Set)"><B>getMarginal(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Extracts the filtered marginal distribution.
<DT><A HREF="javaslam/filter/KalmanFilter.html#getMarginal(java.util.Set)"><B>getMarginal(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Extracts the filtered marginal distribution.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getMarginal(java.util.Set, boolean)"><B>getMarginal(Set, boolean)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Extracts the marginal from the junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getMarginals(java.util.Collection)"><B>getMarginals(Collection)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Extracts a set of unary marginals from the junction tree without
 inverting any cluster potential more than once.
<DT><A HREF="javaslam/filter/Filter.html#getMarginals(java.util.Collection)"><B>getMarginals(Collection)</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Extracts a set of unary marginals.
<DT><A HREF="javaslam/filter/InformationFilter.html#getMarginals(java.util.Collection)"><B>getMarginals(Collection)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Extracts a set of unary marginals.
<DT><A HREF="javaslam/filter/JTFilter.html#getMarginals(java.util.Collection)"><B>getMarginals(Collection)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Extracts a set of unary marginals.
<DT><A HREF="javaslam/filter/KalmanFilter.html#getMarginals(java.util.Collection)"><B>getMarginals(Collection)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Extracts a set of unary marginals.
<DT><A HREF="javaslam/slam/ExampleModel.html#getMeasurementModel()"><B>getMeasurementModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the landmark observation model.
<DT><A HREF="javaslam/slam/Model.html#getMeasurementModel()"><B>getMeasurementModel()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the landmark observation model
 <nobr><b>z</b><sub><i>t</i></sub><sup><i>i</i></sup> =
 <i>h</i>(<b>x</b><sub><i>t</i></sub>,
 <b>l</b><sub><i>j</i></sub>, <b>u</b>)</nobr>.
<DT><A HREF="javaslam/slam/ExampleModel.html#getMotionModel(double[])"><B>getMotionModel(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the motion model.
<DT><A HREF="javaslam/slam/Model.html#getMotionModel(double[])"><B>getMotionModel(double[])</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the motion model <nobr><b>x</b><sub><i>t</i> + 1</sub> =
 <i>f</i>(<b>x</b><sub><i>t</i></sub>, <b>w</b>)</nobr>.
<DT><A HREF="javaslam/slam/ExampleModel.html#getMotionNoiseModel()"><B>getMotionNoiseModel()</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates a motion noise model using parameters specified by system
 properties or default values (when the properties are not defined).
<DT><A HREF="javaslam/slam/ExampleModel.html#getMotionNoiseModel(double, double, double, double)"><B>getMotionNoiseModel(double, double, double, double)</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates a motion noise model.
<DT><A HREF="javaslam/prob/Gaussian.html#getMu(javaslam.util.ListSet)"><B>getMu(ListSet)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets a subvector of <font face="Symbol">m</font>.
<DT><A HREF="javaslam/filter/Linearization.html#getNoiseCovariance()"><B>getNoiseCovariance()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns the covariance matrix of the noise term <b>w</b> in the
 affine-Gaussian approximation

 
 <i>g</i>(<b>x</b>) = <i>a</i> + <i>B</i> <b>x</b> + <b>w</b>
 
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Returns the Gaussian distribution over the noise input.
<DT><A HREF="javaslam/filter/NoisyVectorFunction.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/NoisyVectorFunction.html">NoisyVectorFunction</A>
<DD>Returns the Gaussian distribution over the noise input.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Returns the distribution over the noise variables for this motion
 model.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>Returns the distribution over the noise variables for this motion
 model.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>Returns the distribution over the noise variables for this motion
 model.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#getNoiseModel()"><B>getNoiseModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Returns the distribution over the noise variables for this 
 model.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getNumLandmarks()"><B>getNumLandmarks()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Returns the number of landmarks known to this filter.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getNumLandmarks()"><B>getNumLandmarks()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Returns the number of landmarks known to this filter.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getNumLandmarks()"><B>getNumLandmarks()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Returns the number of landmarks known to this filter.
<DT><A HREF="javaslam/slam/ExampleModel.html#getOdometryModel()"><B>getOdometryModel()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the odometry model.
<DT><A HREF="javaslam/slam/Model.html#getOdometryModel()"><B>getOdometryModel()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the odometry model <nobr><b>y</b><sub><i>t</i></sub> =
 <i>g</i>(<b>x</b><sub><i>t</i></sub>, <b>v</b>)</nobr>.
<DT><A HREF="javaslam/slam/ExampleModel.html#getOdometryNoiseModel()"><B>getOdometryNoiseModel()</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates an odometry noise model using parameters specified by system
 properties or default values (when the properties are not defined).
<DT><A HREF="javaslam/slam/ExampleModel.html#getOdometryNoiseModel(double, double, double, double)"><B>getOdometryNoiseModel(double, double, double, double)</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Creates an odometry noise model.
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/filter/VectorFunction.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/VectorFunction.html">VectorFunction</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#getOutputDim()"><B>getOutputDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Returns the output dimension of this function.
<DT><A HREF="javaslam/filter/Linearization.html#getOutputVariable()"><B>getOutputVariable()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Returns the variable representing the output of the random
 function.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getPotential()"><B>getPotential()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns this cluster's potential.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#getPotential()"><B>getPotential()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Returns the separator potential.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#getReverse()"><B>getReverse()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Returns the complement of this edge, i.e., the edge that
 emanates from this edge's terminus and terminates on this
 edge's origin (and which shares this edge's separator
 potential).
<DT><A HREF="javaslam/slam/ExampleModel.html#getRobotDim()"><B>getRobotDim()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>Returns the dimension of the robot's state.
<DT><A HREF="javaslam/slam/Model.html#getRobotDim()"><B>getRobotDim()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>
<DD>Returns the dimension of the robot's state.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getRobotEstimate()"><B>getRobotEstimate()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Returns the filtered estimate of the robot's state.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getRobotEstimate()"><B>getRobotEstimate()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Returns the filtered estimate of the robot's state.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getRobotEstimate()"><B>getRobotEstimate()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Returns the filtered estimate of the robot's state.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getRobotEstimate()"><B>getRobotEstimate()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Returns the filtered estimate of the robot's state.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#getRobotLandmarkMarginal(int)"><B>getRobotLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>This method computes the joint filtered distribution over the
 states of the robot and a landmark.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#getRobotLandmarkMarginal(int)"><B>getRobotLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>This method computes the joint filtered distribution over the
 states of the robot and a landmark.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getRobotLandmarkMarginal(int)"><B>getRobotLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>This method computes the joint filtered distribution over the
 states of the robot and a landmark.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getRobotLandmarkMarginal(int)"><B>getRobotLandmarkMarginal(int)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>This method computes the joint filtered distribution over the
 states of the robot and a landmark.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#getRobotLandmarkMarginals(int[])"><B>getRobotLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Given a set of landmarks { <i>l</i><sub>1</sub>, ...,
 <i>l</i><sub>k</sub>}, this method computes a set of potentials
 over (<i>x</i>, <i>l</i><sub>1</sub>), ..., (<i>x</i>,
 <i>l</i><sub>k</sub>).
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getRobotLandmarkMarginals(int[])"><B>getRobotLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Given a set of landmarks { <i>l</i><sub>1</sub>, ...,
 <i>l</i><sub>k</sub>}, this method computes a set of potentials
 over (<i>x</i>, <i>l</i><sub>1</sub>), ..., (<i>x</i>,
 <i>l</i><sub>k</sub>).
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getRobotLandmarkMarginals(int[])"><B>getRobotLandmarkMarginals(int[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Given a set of landmarks { <i>l</i><sub>1</sub>, ...,
 <i>l</i><sub>k</sub>}, this method computes a set of potentials
 over (<i>x</i>, <i>l</i><sub>1</sub>), ..., (<i>x</i>,
 <i>l</i><sub>k</sub>).
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#getRobotMarginal()"><B>getRobotMarginal()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Returns the filtered marginal potential (in the moment
 parameterization) over the robot's state.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#getRobotMarginal()"><B>getRobotMarginal()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Returns the filtered marginal potential over the robot's state.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#getRobotMarginal()"><B>getRobotMarginal()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Returns the filtered marginal potential over the robot's state
 (in the moment parameterization).
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#getRobotMarginal()"><B>getRobotMarginal()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Returns the filtered marginal potential (in the moment
 parameterization) over the robot's state.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#getRobotVariable()"><B>getRobotVariable()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>Gets the state variable associated with the robot.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#getRobotVariable()"><B>getRobotVariable()</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Gets the state variable associated with the robot.
<DT><A HREF="javaslam/slam/SLAMFilter.html#getRobotVariable()"><B>getRobotVariable()</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>
<DD>Gets the state variable associated with the robot.
<DT><A HREF="javaslam/tjt/graph/Node.html#getShortestPath(javaslam.tjt.graph.NodeFilter)"><B>getShortestPath(NodeFilter)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Computes the shortest path from this node to another node
 satisfying a particular property.
<DT><A HREF="javaslam/prob/Gaussian.html#getSigma(javaslam.util.ListSet, javaslam.util.ListSet)"><B>getSigma(ListSet, ListSet)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Gets a submatrix of <font face="Symbol">S</font>.
<DT><A HREF="javaslam/prob/Gaussian.html#getSize()"><B>getSize()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Returns the number of variables bound by this Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getSize()"><B>getSize()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns the size of this cluster, which is the size of its
 potential.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getSubsumedNeighbor()"><B>getSubsumedNeighbor()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Searches for an adjacent cluster that whose variables are all
 contained in this cluster.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getSubsumingNeighbor()"><B>getSubsumingNeighbor()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Searches for an adjacent cluster that contains all the
 variables contained in this cluster.
<DT><A HREF="javaslam/filter/InformationFilter.html#getUnconditionalGaussian(javaslam.util.ListSet, javaslam.util.ListSet, Jama.Matrix, Jama.Matrix, Jama.Matrix)"><B>getUnconditionalGaussian(ListSet, ListSet, Matrix, Matrix, Matrix)</B></A> - 
Static method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Constructs a linear-Gaussian potential that introduces a set of
 new unobserved variables.
<DT><A HREF="javaslam/prob/Gaussian.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Returns an unmodifiable ordered set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s bound by this Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Gets an unmodifiable set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in
 this junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns an unmodifiable set of this cluster's variables.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Returns an unmodifiable set of this edge's separator variables.
<DT><A HREF="javaslam/filter/Filter.html#getVariables()"><B>getVariables()</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Gets an unmodifiable set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in the
 filtered belief state.
<DT><A HREF="javaslam/filter/InformationFilter.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Gets an unmodifiable set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in the
 filtered belief state.
<DT><A HREF="javaslam/filter/JTFilter.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Gets an unmodifiable set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in the
 filtered belief state.
<DT><A HREF="javaslam/filter/KalmanFilter.html#getVariables()"><B>getVariables()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Gets an unmodifiable set of the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s in the
 filtered belief state.
</DL>
<HR>
<A NAME="_H_"><!-- --></A><H2>
<B>H</B></H2>
<DL>
<DT><A HREF="javaslam/prob/Variable.html#hashCode()"><B>hashCode()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Finalizes the definition of <CODE>hashCode</CODE>.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#hashCode()"><B>hashCode()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>Returns the hash code of this element's item.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#hashCode()"><B>hashCode()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Returns the hash code of this edge contraction.
<DT><A HREF="javaslam/tjt/graph/Edge.html#hashCode()"><B>hashCode()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>Redefines <code>hashCode</code> so the hash code of an edge is
 the sum of the hash codes of its nodes.
<DT><A HREF="javaslam/tjt/graph/Node.html#hashCode()"><B>hashCode()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Finalizes the definition of <code>hashCode</code> to be the same as
 that of <CODE>hashCode</CODE>.
<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html#hasNext()"><B>hasNext()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>
<DD>Returns <code>true</code> if this iterator has more items.
<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html#hasNext()"><B>hasNext()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>
<DD>Returns <code>true</code> if the iteration has more elements.
<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html#hasNext()"><B>hasNext()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>
<DD>Returns <code>true</code> if the iteration has more elements.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#hasNext()"><B>hasNext()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns <code>true</code> if the iteration has more elements.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#HEADING"><B>HEADING</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#HEADING"><B>HEADING</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#HEADING"><B>HEADING</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#HEADING"><B>HEADING</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/util/PriorityQueue.html#highest()"><B>highest()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns the priority of the highest priority item in the queue.
</DL>
<HR>
<A NAME="_I_"><!-- --></A><H2>
<B>I</B></H2>
<DL>
<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html#i"><B>i</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>
<DD>The underlying iterator over elements.
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#id2lm"><B>id2lm</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>A map from <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Integer.html"><CODE>Integer</CODE></A> landmark identifiers to <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s representing the corresponding landmark's state.
<DT><A HREF="javaslam/util/ListSet.html#indexOf(java.lang.Object)"><B>indexOf(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns the index in this set of the specified element, or -1 if
 this set does not contain this element.
<DT><A HREF="javaslam/filter/InformationFilter.html"><B>InformationFilter</B></A> - class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>.<DD>An Information filter.<DT><A HREF="javaslam/filter/InformationFilter.html#InformationFilter(javaslam.prob.Gaussian)"><B>InformationFilter(Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html"><B>InformationSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>.<DD>An information filter for the Simultaneous Localization and
 Mapping (SLAM) problem.<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#InformationSLAMFilter(double[], double[][])"><B>InformationSLAMFilter(double[], double[][])</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#initialize(javaslam.tjt.JunctionTree.JTEdge, javaslam.prob.Variable, boolean)"><B>initialize(JunctionTree.JTEdge, Variable, boolean)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Initializer.
<DT><A HREF="javaslam/prob/Gaussian.html#initialize(javaslam.util.ListSet, Jama.Matrix, Jama.Matrix)"><B>initialize(ListSet, Matrix, Matrix)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Initializes this Gaussian using the supplied arguments.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#INPUT_DIM"><B>INPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>The input dimension of the motion model.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#INPUT_DIM"><B>INPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>The input dimension of the odometry model.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#INPUT_DIM"><B>INPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>The input dimension of the landmark measurement model.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#INPUT_DIM"><B>INPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>The input dimension of the model.
<DT><A HREF="javaslam/util/Flops.html#inv(int, boolean)"><B>inv(int, boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to invert an
 <code>n</code>-by-<code>n</code> matrix that is possibly
 symmetric positive definite.
<DT><A HREF="javaslam/prob/Gaussian.html#isCanonical()"><B>isCanonical()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Returns <code>true</code> if this Gaussian is represented using
 the canonical parameterization, i.e., using the vector <font
 face="Symbol">h</font> and the (positive definite) matrix
 <font face="Symbol">L</font>.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#isCyclic()"><B>isCyclic()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns <code>true</code> if the traversal has visited a node
 more than once, implying the existence of a cycle if the graph is
 undirected.
<DT><A HREF="javaslam/util/ListSet.html#isEmpty()"><B>isEmpty()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns <tt>true</tt> if this set contains no elements.
<DT><A HREF="javaslam/util/PriorityQueue.html#isEmpty()"><B>isEmpty()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns <code>true</code> iff this queue is empty.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#isLeaf()"><B>isLeaf()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns <code>true</code> if this cluster is a leaf.
<DT><A HREF="javaslam/prob/Gaussian.html#isMoment"><B>isMoment</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>A field indicating whether this Gaussian is currently
 represented in the moment parameterization.
<DT><A HREF="javaslam/prob/Gaussian.html#isMoment()"><B>isMoment()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Returns <code>true</code> if this Gaussian is represented using
 the moment parameterization, i.e., using the mean vector <font
 face="Symbol">m</font> and the (positive definite)
 covariance matrix <font face="Symbol">S</font>.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#isSubtreeLeaf(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>isSubtreeLeaf(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Determines if the supplied cluster is a non-root leaf of the
 subtree induced by the supplied variable.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#item"><B>item</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>The actual item.
<DT><A HREF="javaslam/util/PriorityQueue.html#itemsToElements"><B>itemsToElements</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Maps items to their elements.
<DT><A HREF="javaslam/util/ListSet.html#iterator()"><B>iterator()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns an iterator over the elements in this set in proper sequence.
<DT><A HREF="javaslam/util/PriorityQueue.html#iterator()"><B>iterator()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns an iterator over the items in this priority queue in
 order of decreasing priority.
</DL>
<HR>
<A NAME="_J_"><!-- --></A><H2>
<B>J</B></H2>
<DL>
<DT><A HREF="javaslam/filter/ExtendedVectorFunction.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/ExtendedVectorFunction.html">ExtendedVectorFunction</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#jacobian(double[])"><B>jacobian(double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>Evaluates the Jacobian of this function at the supplied input.
<DT><A HREF="javaslam/filter/package-summary.html"><B>javaslam.filter</B></A> - package javaslam.filter<DD>Contains data structures and algorithms for linear-Gaussian filtering
and linearizing nonlinear functions.<DT><A HREF="javaslam/prob/package-summary.html"><B>javaslam.prob</B></A> - package javaslam.prob<DD>Contains data structures and algorithms relating to probability theory.<DT><A HREF="javaslam/slam/package-summary.html"><B>javaslam.slam</B></A> - package javaslam.slam<DD>Contains data structures and algorithms for filtering approaches to
the Simultaneous Localization and Mapping (<font
size="-1">SLAM</font>) problem (with known data association).<DT><A HREF="javaslam/tjt/package-summary.html"><B>javaslam.tjt</B></A> - package javaslam.tjt<DD>Contains data structures and algorithms for incremental junction tree maintenance and junction tree thinning.<DT><A HREF="javaslam/tjt/graph/package-summary.html"><B>javaslam.tjt.graph</B></A> - package javaslam.tjt.graph<DD>Contains a simple graph data structure and methods for search.<DT><A HREF="javaslam/util/package-summary.html"><B>javaslam.util</B></A> - package javaslam.util<DD>Contains generic data structures and algorithms.<DT><A HREF="javaslam/filter/KalmanFilter.html#joseph(javaslam.util.ListSet, double[], double[][], double[][], double[])"><B>joseph(ListSet, double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Performs a linear-Gaussian measurement update using the <i>Joseph
 form</i> of the covariance update, which is numerically more
 stable.
<DT><A HREF="javaslam/filter/JTFilter.html#jt"><B>jt</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>The junction tree used to represent the belief state.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#jt"><B>jt</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>The thin junction tree used to represent the filtered belief
 state.
<DT><A HREF="javaslam/filter/JTFilter.html"><B>JTFilter</B></A> - class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>.<DD>A junction tree filter.<DT><A HREF="javaslam/filter/JTFilter.html#JTFilter(javaslam.tjt.JunctionTree)"><B>JTFilter(JunctionTree)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Default constructor.
<DT><A HREF="javaslam/tjt/JunctionTree.html"><B>JunctionTree</B></A> - class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>.<DD>A junction tree for a Gaussian graphical model.<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html"><B>JunctionTree.Cluster</B></A> - class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>.<DD>A cluster of a junction tree.<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#JunctionTree.Cluster()"><B>JunctionTree.Cluster()</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Creates an empty cluster.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#JunctionTree.Cluster(javaslam.prob.Gaussian)"><B>JunctionTree.Cluster(Gaussian)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Creates a cluster with the supplied potential.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#JunctionTree.Cluster(javaslam.tjt.JunctionTree.Cluster)"><B>JunctionTree.Cluster(JunctionTree.Cluster)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Copy constructor.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html"><B>JunctionTree.JTEdge</B></A> - class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>.<DD>A (directed) edge from one cluster to another in a junction tree.<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#JunctionTree.JTEdge(javaslam.tjt.JunctionTree.Cluster, javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Gaussian)"><B>JunctionTree.JTEdge(JunctionTree.Cluster, JunctionTree.Cluster, Gaussian)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/JunctionTree.html#JunctionTree()"><B>JunctionTree()</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Default constructor.
</DL>
<HR>
<A NAME="_K_"><!-- --></A><H2>
<B>K</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#k"><B>k</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The dimension of the output vector.
<DT><A HREF="javaslam/filter/KalmanFilter.html"><B>KalmanFilter</B></A> - class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>.<DD>A Kalman filter.<DT><A HREF="javaslam/filter/KalmanFilter.html#KalmanFilter(javaslam.prob.Gaussian)"><B>KalmanFilter(Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html"><B>KalmanSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>.<DD>A Kalman filter for the Simultaneous Localization and Mapping (SLAM)
 problem.<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#KalmanSLAMFilter(double[], double[][])"><B>KalmanSLAMFilter(double[], double[][])</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#kf"><B>kf</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>The underlying Kalman filter.
<DT><A HREF="javaslam/prob/Gaussian.html#kl(javaslam.prob.Gaussian)"><B>kl(Gaussian)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Computes the relative entropy (Kullback-Liebler divergence) from
 this Gaussian to the supplied Gaussian.
</DL>
<HR>
<A NAME="_L_"><!-- --></A><H2>
<B>L</B></H2>
<DL>
<DT><A HREF="javaslam/prob/Variable.html#label"><B>label</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>The label for this variable.
<DT><A HREF="javaslam/slam/ExampleModel.html#LANDMARK_DIM"><B>LANDMARK_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>The dimension of each landmark's state.
<DT><A HREF="javaslam/slam/ExampleModel.html#landmarkMeasurementModel"><B>landmarkMeasurementModel</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>The landmark measurement model.
<DT><A HREF="javaslam/slam/ExampleModel.html#landmarkNoiseModel"><B>landmarkNoiseModel</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>A distribution over the noise variables of the landmark
 measurement model.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#largestCluster()"><B>largestCluster()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Returns the cluster with largest size in the junction tree.
<DT><A HREF="javaslam/util/ListSet.html#lastIndexOf(java.lang.Object)"><B>lastIndexOf(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns the index in this set of the specified element, or -1 if
 this set does not contain this element.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html"><B>LGSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>.<DD>A linear-Gaussian filter for the Simultaneous Localization and
 Mapping (SLAM) problem.<DT><A HREF="javaslam/slam/LGSLAMFilter.html#LGSLAMFilter(int)"><B>LGSLAMFilter(int)</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html"><B>LGSLAMFilterCanvas</B></A> - class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>.<DD>&nbsp;<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#LGSLAMFilterCanvas(javaslam.slam.LGSLAMFilter)"><B>LGSLAMFilterCanvas(LGSLAMFilter)</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>Constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#likelihood(double[])"><B>likelihood(double[])</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Computes the likelihood of a particular value under this
 distribution.
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html"><B>LinearGaussianFunction</B></A> - class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>.<DD>A vector-valued function that takes a vector input, the bottom part
 of which is a white noise vector.<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#LinearGaussianFunction(Jama.Matrix, javaslam.prob.Gaussian)"><B>LinearGaussianFunction(Matrix, Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>Constructor.
<DT><A HREF="javaslam/filter/LinearizedFilter.html#linearization"><B>linearization</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>
<DD>The factory for creating linearizations.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#linearization"><B>linearization</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>The factory for creating linearizations.
<DT><A HREF="javaslam/filter/Linearization.html"><B>Linearization</B></A> - class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>.<DD>A linear-Gaussian approximation to a nonlinear vector-valued
 function of Gaussian-distributed inputs.<DT><A HREF="javaslam/filter/Linearization.html#Linearization(javaslam.filter.NoisyVectorFunction, javaslam.prob.Gaussian)"><B>Linearization(NoisyVectorFunction, Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>Constructor.
<DT><A HREF="javaslam/filter/LinearizationFactory.html"><B>LinearizationFactory</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/LinearizationFactory.html">LinearizationFactory</A>.<DD>A factory for linearization objects.<DT><A HREF="javaslam/filter/LinearizationFactory.html#linearize(javaslam.filter.NoisyVectorFunction, javaslam.prob.Gaussian)"><B>linearize(NoisyVectorFunction, Gaussian)</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/LinearizationFactory.html">LinearizationFactory</A>
<DD>Creates a new linearization.
<DT><A HREF="javaslam/filter/LinearizedFilter.html"><B>LinearizedFilter</B></A> - class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>.<DD>A filter for nonlinear systems that uses local linearizations of
 the dynamics and measurement models so that a linear-Gaussian
 filter can be used to maintain an approximate Gaussian belief
 state.<DT><A HREF="javaslam/filter/LinearizedFilter.html#LinearizedFilter(javaslam.filter.Filter, javaslam.filter.LinearizationFactory)"><B>LinearizedFilter(Filter, LinearizationFactory)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html"><B>LinearizedSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>.<DD>A nonlinear filter for the Simultaneous Localization and Mapping
 <font size="-1">SLAM</font> problem that uses a linear-Gaussian
 filter with a technique for linearizing nonlinear motion and
 measurement models.<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#LinearizedSLAMFilter(javaslam.slam.LGSLAMFilter)"><B>LinearizedSLAMFilter(LGSLAMFilter)</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#LinearizedSLAMFilter(javaslam.slam.LGSLAMFilter, javaslam.filter.LinearizationFactory)"><B>LinearizedSLAMFilter(LGSLAMFilter, LinearizationFactory)</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/JunctionTree.html#link(javaslam.tjt.JunctionTree.Cluster, javaslam.tjt.JunctionTree.Cluster)"><B>link(JunctionTree.Cluster, JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Adds a new pair of edges between the supplied clusters.
<DT><A HREF="javaslam/util/ListSet.html#list"><B>list</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>The underlying list.
<DT><A HREF="javaslam/util/ListSet.html#listIterator()"><B>listIterator()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns a list iterator of the elements in this set (in proper
 sequence).
<DT><A HREF="javaslam/util/ListSet.html#listIterator(int)"><B>listIterator(int)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns a list iterator of the elements in this list (in proper
 sequence), starting at the specified position in this set.
<DT><A HREF="javaslam/util/ListSet.html"><B>ListSet</B></A> - class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>.<DD>A set implemented by a list, or equivalently, a list with no
 duplicate elements.<DT><A HREF="javaslam/util/ListSet.html#ListSet()"><B>ListSet()</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/ListSet.html#ListSet(java.util.Collection)"><B>ListSet(Collection)</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/ListSet.html#ListSet(java.lang.Object)"><B>ListSet(Object)</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/ListSet.html#ListSet(java.lang.Object[])"><B>ListSet(Object[])</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#LM_XPOS"><B>LM_XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#LM_XPOS"><B>LM_XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#LM_YPOS"><B>LM_YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#LM_YPOS"><B>LM_YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#lm2id"><B>lm2id</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>A map from <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s representing landmarks' states
 to <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Integer.html"><CODE>Integer</CODE></A> identifiers of the corresponding landmarks .
<DT><A HREF="javaslam/util/Flops.html#log()"><B>log()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the logarithm of a number.
<DT><A HREF="javaslam/util/Flops.html#lu(int)"><B>lu(int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the LU decomposition of an <code>n</code>-by-<code>n</code>
 square matrix.
</DL>
<HR>
<A NAME="_M_"><!-- --></A><H2>
<B>M</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#m"><B>m</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The sum dimension of the noise vector.
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#main(java.lang.String[])"><B>main(String[])</B></A> - 
Static method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>&nbsp;
<DT><A HREF="javaslam/prob/Gaussian.html#marginalize(java.util.Set, boolean)"><B>marginalize(Set, boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Marginalizes out a subset of the variables in this Gaussian.
<DT><A HREF="javaslam/prob/Gaussian.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Marginalizes a set of variables out of this Gaussian (in place).
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Marginalizes out a set of variables from this cluster.
<DT><A HREF="javaslam/filter/Filter.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Marginalizes a set of variables out of the belief state.
<DT><A HREF="javaslam/filter/InformationFilter.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Marginalizes a set of variables out of the belief state.
<DT><A HREF="javaslam/filter/JTFilter.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Marginalizes a set of variables out of the belief state.
<DT><A HREF="javaslam/filter/KalmanFilter.html#marginalizeOut(java.util.Set)"><B>marginalizeOut(Set)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Marginalizes a set of variables out of the belief state.
<DT><A HREF="javaslam/tjt/JunctionTree.html#marginalizeOut(javaslam.prob.Variable)"><B>marginalizeOut(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Marginalizes a variable out of this junction tree.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#measurement(int, double[], double[][], double[][], double[][], double[])"><B>measurement(int, double[], double[][], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Performs a linear-Gaussian landmark measurement update.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#measurement(int, double[], double[][], double[][], double[][], double[])"><B>measurement(int, double[], double[][], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Performs a linear-Gaussian landmark measurement update.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#measurement(int, double[], double[][], double[][], double[][], double[])"><B>measurement(int, double[], double[][], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Performs a linear-Gaussian landmark measurement update.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#measurement(int, double[], double[][], double[][], double[][], double[])"><B>measurement(int, double[], double[][], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Performs a linear-Gaussian landmark measurement update.
<DT><A HREF="javaslam/filter/Filter.html#measurement(javaslam.util.ListSet, double[], double[][], double[][], double[])"><B>measurement(ListSet, double[], double[][], double[][], double[])</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Performs a linear-Gaussian measurement update.
<DT><A HREF="javaslam/filter/InformationFilter.html#measurement(javaslam.util.ListSet, double[], double[][], double[][], double[])"><B>measurement(ListSet, double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Performs a linear-Gaussian measurement update.
<DT><A HREF="javaslam/filter/JTFilter.html#measurement(javaslam.util.ListSet, double[], double[][], double[][], double[])"><B>measurement(ListSet, double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Performs a linear-Gaussian measurement update.
<DT><A HREF="javaslam/filter/KalmanFilter.html#measurement(javaslam.util.ListSet, double[], double[][], double[][], double[])"><B>measurement(ListSet, double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Performs a linear-Gaussian measurement update.
<DT><A HREF="javaslam/filter/LinearizedFilter.html#measurement(javaslam.util.ListSet, javaslam.filter.NoisyVectorFunction, double[])"><B>measurement(ListSet, NoisyVectorFunction, double[])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>
<DD>Performs an approximate nonlinear measurement update.
<DT><A HREF="javaslam/filter/NonlinearFilter.html#measurement(javaslam.util.ListSet, javaslam.filter.NoisyVectorFunction, double[])"><B>measurement(ListSet, NoisyVectorFunction, double[])</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/NonlinearFilter.html">NonlinearFilter</A>
<DD>Performs an approximate nonlinear measurement update.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#measurement(javaslam.filter.NoisyVectorFunction, javaslam.filter.NoisyVectorFunction, int, double[])"><B>measurement(NoisyVectorFunction, NoisyVectorFunction, int, double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Performs a landmark measurement update assuming a known data
 association.
<DT><A HREF="javaslam/slam/NonlinearSLAMFilter.html#measurement(javaslam.filter.NoisyVectorFunction, javaslam.filter.NoisyVectorFunction, int, double[])"><B>measurement(NoisyVectorFunction, NoisyVectorFunction, int, double[])</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/NonlinearSLAMFilter.html">NonlinearSLAMFilter</A>
<DD>Performs a landmark measurement update assuming a known data
 association.
<DT><A HREF="javaslam/tjt/JunctionTree.html#merge(javaslam.tjt.JunctionTree.JTEdge)"><B>merge(JunctionTree.JTEdge)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Merges the two clusters that are incident to the supplied edge.
<DT><A HREF="javaslam/tjt/JunctionTree.html#mergeClustersWith(javaslam.prob.Variable)"><B>mergeClustersWith(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Merges all clusters containing a particular variable.
<DT><A HREF="javaslam/slam/Model.html"><B>Model</B></A> - interface javaslam.slam.<A HREF="javaslam/slam/Model.html">Model</A>.<DD>Represents a <font size="-1">SLAM</font> model.<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#motion(double[], double[][], double[][])"><B>motion(double[], double[][], double[][])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Performs a linear-Gaussian motion update.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#motion(double[], double[][], double[][])"><B>motion(double[], double[][], double[][])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Performs a linear-Gaussian motion update.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#motion(double[], double[][], double[][])"><B>motion(double[], double[][], double[][])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Performs a linear-Gaussian motion update.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#motion(double[], double[][], double[][])"><B>motion(double[], double[][], double[][])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Performs a linear-Gaussian motion update.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#motion(javaslam.filter.NoisyVectorFunction)"><B>motion(NoisyVectorFunction)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Performs a motion update.
<DT><A HREF="javaslam/slam/NonlinearSLAMFilter.html#motion(javaslam.filter.NoisyVectorFunction)"><B>motion(NoisyVectorFunction)</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/NonlinearSLAMFilter.html">NonlinearSLAMFilter</A>
<DD>Performs a motion update.
<DT><A HREF="javaslam/slam/ExampleModel.html#motionNoiseModel"><B>motionNoiseModel</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>A distribution over the noise variables of the motion model.
<DT><A HREF="javaslam/prob/Gaussian.html#mP"><B>mP</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>The positive definite matrix parameter; this is <font
 face="Symbol">S</font> if <A HREF="javaslam/prob/Gaussian.html#isMoment"><CODE>Gaussian.isMoment</CODE></A> is <code>true</code>
 and <font face="Symbol">L</font> otherwise.
<DT><A HREF="javaslam/util/Flops.html#mult(int, int, int)"><B>mult(int, int, int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the product of two matrices <I>A</i> and <i>B</i>.
<DT><A HREF="javaslam/prob/Gaussian.html#mutualInformation(java.util.Set, java.util.Set, java.util.Set)"><B>mutualInformation(Set, Set, Set)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Computes the (conditional) mutual information
 <nobr>I(<code>x</code>;<code>y</code> -
 <code>x</code>|<code>z</code>)</nobr> in nats (natural
 logarithmic units).
</DL>
<HR>
<A NAME="_N_"><!-- --></A><H2>
<B>N</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#n"><B>n</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>The sum dimension of the input vector.
<DT><A HREF="javaslam/tjt/JunctionTree.html#newLeaf(javaslam.tjt.JunctionTree.Cluster)"><B>newLeaf(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Creates an empty cluster and attaches it as a leaf off of the
 supplied cluster.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#newLeaf(javaslam.tjt.JunctionTree.Cluster)"><B>newLeaf(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Creates an empty cluster and attaches it as a leaf off of the
 supplied cluster.
<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html#next()"><B>next()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>
<DD>Returns the next item in this iteration.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#next()"><B>next()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns the next <A HREF="javaslam/tjt/graph/Node.html"><CODE>Node</CODE></A> in the iteration.
<DT><A HREF="javaslam/tjt/graph/Node.html"><B>Node</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>.<DD>A node in a graph.<DT><A HREF="javaslam/tjt/graph/Node.html#Node()"><B>Node()</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Default constructor.
<DT><A HREF="javaslam/tjt/graph/NodeFilter.html"><B>NodeFilter</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/NodeFilter.html">NodeFilter</A>.<DD>A predicate over graph nodes.<DT><A HREF="javaslam/tjt/graph/NodeFilter.html#NodeFilter(java.lang.Object)"><B>NodeFilter(Object)</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/NodeFilter.html">NodeFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/filter/NoisyVectorFunction.html"><B>NoisyVectorFunction</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/NoisyVectorFunction.html">NoisyVectorFunction</A>.<DD>A vector-valued function that takes a vector input, the bottom part
 of which is a white noise vector.<DT><A HREF="javaslam/filter/NonlinearFilter.html"><B>NonlinearFilter</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/NonlinearFilter.html">NonlinearFilter</A>.<DD>A filter for nonlinear systems that maintains an approximate
 Gaussian belief state.<DT><A HREF="javaslam/slam/NonlinearSLAMFilter.html"><B>NonlinearSLAMFilter</B></A> - interface javaslam.slam.<A HREF="javaslam/slam/NonlinearSLAMFilter.html">NonlinearSLAMFilter</A>.<DD>An interface implemented by classes that implement nonlinear
 filters for the Simultaneous Localization and Mapping (SLAM)
 problem.</DL>
<HR>
<A NAME="_O_"><!-- --></A><H2>
<B>O</B></H2>
<DL>
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#ODO_RVEL"><B>ODO_RVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#ODO_TVEL"><B>ODO_TVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#odometry(double[], double[][], double[][], double[])"><B>odometry(double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>Performs a linear-Gaussian odometry update.
<DT><A HREF="javaslam/slam/KalmanSLAMFilter.html#odometry(double[], double[][], double[][], double[])"><B>odometry(double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/KalmanSLAMFilter.html">KalmanSLAMFilter</A>
<DD>Performs a linear-Gaussian odometry update.
<DT><A HREF="javaslam/slam/LGSLAMFilter.html#odometry(double[], double[][], double[][], double[])"><B>odometry(double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilter.html">LGSLAMFilter</A>
<DD>Performs a linear-Gaussian odometry update.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#odometry(double[], double[][], double[][], double[])"><B>odometry(double[], double[][], double[][], double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Performs a linear-Gaussian odometry update.
<DT><A HREF="javaslam/slam/LinearizedSLAMFilter.html#odometry(javaslam.filter.NoisyVectorFunction, double[])"><B>odometry(NoisyVectorFunction, double[])</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LinearizedSLAMFilter.html">LinearizedSLAMFilter</A>
<DD>Performs an odometry update.
<DT><A HREF="javaslam/slam/NonlinearSLAMFilter.html#odometry(javaslam.filter.NoisyVectorFunction, double[])"><B>odometry(NoisyVectorFunction, double[])</B></A> - 
Method in interface javaslam.slam.<A HREF="javaslam/slam/NonlinearSLAMFilter.html">NonlinearSLAMFilter</A>
<DD>Performs an odometry update.
<DT><A HREF="javaslam/slam/ExampleModel.html#odometryModel"><B>odometryModel</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>The odometry model.
<DT><A HREF="javaslam/slam/ExampleModel.html#odometryNoiseModel"><B>odometryNoiseModel</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>A distribution over the noise variables of the odometry model.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#OUTPUT_DIM"><B>OUTPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>The output dimension of the motion model.
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#OUTPUT_DIM"><B>OUTPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>The output dimension of the odometry model.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#OUTPUT_DIM"><B>OUTPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>The output dimension of the landmark measurement model.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#OUTPUT_DIM"><B>OUTPUT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>The output dimension of the model.
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#overlap"><B>overlap</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>When the active cluster is cloned to admit a new landmark
 variable, this is the size of its separator.
</DL>
<HR>
<A NAME="_P_"><!-- --></A><H2>
<B>P</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#p"><B>p</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>The potential of this cluster.
<DT><A HREF="javaslam/filter/InformationFilter.html#p"><B>p</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>The canonical potential representing the belief state.
<DT><A HREF="javaslam/filter/KalmanFilter.html#p"><B>p</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>The moment potential representing the belief state.
<DT><A HREF="javaslam/slam/LGSLAMFilterCanvas.html#paint(java.awt.Graphics)"><B>paint(Graphics)</B></A> - 
Method in class javaslam.slam.<A HREF="javaslam/slam/LGSLAMFilterCanvas.html">LGSLAMFilterCanvas</A>
<DD>&nbsp;
<DT><A HREF="javaslam/prob/Gaussian.html#paint(java.awt.Graphics2D, double)"><B>paint(Graphics2D, double)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Paints a 2D confidence ellipse for the first two dimensions of
 this Gaussian distribution.
<DT><A HREF="javaslam/tjt/JunctionTree.html#parents()"><B>parents()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns a directed representation of the junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#passFlow()"><B>passFlow()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Passes a flow along this edge.
<DT><A HREF="javaslam/tjt/JunctionTree.html#passFlows()"><B>passFlows()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Restores consistency; all clusters into new potentials have been
 multiplied that have not yet distributed their evidence do so.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#path()"><B>path()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns a list of <A HREF="javaslam/tjt/graph/Edge.html"><CODE>Edge</CODE></A>s that were traversed in order
 to reach the Node most recently returned by <A HREF="javaslam/tjt/graph/Traversal.html#next()"><CODE>next()</CODE></A>.
<DT><A HREF="javaslam/util/PriorityQueue.html#peek()"><B>peek()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns the item with the highest priority without removing it
 from the queue.
<DT><A HREF="javaslam/slam/InformationSLAMFilter.html#pf"><B>pf</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/InformationSLAMFilter.html">InformationSLAMFilter</A>
<DD>The thin junction tree used to represent the filtered belief
 state.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#priority"><B>priority</B></A> - 
Variable in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>The priority of the item.
<DT><A HREF="javaslam/util/PriorityQueue.html"><B>PriorityQueue</B></A> - class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>.<DD>A priority queue.<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html"><B>PriorityQueue.QueueElement</B></A> - class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>.<DD>An item in a priority queue.<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#PriorityQueue.QueueElement(java.lang.Object, java.lang.Comparable)"><B>PriorityQueue.QueueElement(Object, Comparable)</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html"><B>PriorityQueue.QueueItemIterator</B></A> - class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>.<DD>An iterator over queue items.<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html#PriorityQueue.QueueItemIterator(java.util.Iterator)"><B>PriorityQueue.QueueItemIterator(Iterator)</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>
<DD>Constructor.
<DT><A HREF="javaslam/util/PriorityQueue.html#PriorityQueue()"><B>PriorityQueue()</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Constructor.
</DL>
<HR>
<A NAME="_Q_"><!-- --></A><H2>
<B>Q</B></H2>
<DL>
<DT><A HREF="javaslam/filter/LinearGaussianFunction.html#q"><B>q</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/LinearGaussianFunction.html">LinearGaussianFunction</A>
<DD>The noise model.
<DT><A HREF="javaslam/filter/Linearization.html#q"><B>q</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>A Gaussian distribution (in the moment parameterization) that
 approximates <i>p</i>(<b>x</b>, <b>v</b>, <b>y</b>).
<DT><A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html#queue"><B>queue</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/BreadthFirstTraversal.html">BreadthFirstTraversal</A>
<DD>A queue of nodes to be visited in this search.
<DT><A HREF="javaslam/tjt/graph/DepthFirstTraversal.html#queue"><B>queue</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/DepthFirstTraversal.html">DepthFirstTraversal</A>
<DD>A queue of nodes to be visited in this search.
</DL>
<HR>
<A NAME="_R_"><!-- --></A><H2>
<B>R</B></H2>
<DL>
<DT><A HREF="javaslam/util/Flops.html#rand()"><B>rand()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute a
 random double-precision floating point number between 0.0 and 1.0
 using a simple linear-congruential formula <i>x</i><sub>i +
 1</sub> = <b>a</b> <i>x</i><sub>i</sub> + <b>b</b> (mod <b>c</b>).
<DT><A HREF="javaslam/util/Flops.html#randn()"><B>randn()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute a
 sample from the standard normal using the Box-Muller method.
<DT><A HREF="javaslam/util/Flops.html#randnorm(int, int)"><B>randnorm(int, int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 <code>n</code> samples from a <code>k</code>-dimensional
 multivariate Gaussian distribution represented using a covariance
 matrix.
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#range"><B>range</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>The noisy range measurement.
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#RANGE_ABS_NOISE"><B>RANGE_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#RANGE_ABS_NOISE"><B>RANGE_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#RANGE_REL_NOISE"><B>RANGE_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#RANGE_REL_NOISE"><B>RANGE_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/tjt/JunctionTree.html#reduce(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>reduce(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Reduces the supplied cluster so that it no longer contains the
 supplied variable.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#reduce(javaslam.tjt.JunctionTree.Cluster, javaslam.prob.Variable)"><B>reduce(JunctionTree.Cluster, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Reduces the supplied cluster so that it no longer contains the
 supplied variable.
<DT><A HREF="javaslam/util/TJTF.html#regularize(Jama.Matrix, double)"><B>regularize(Matrix, double)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Regularizes a covariance matrix so that its condition number is
 no greater than a specified value.
<DT><A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html#remove()"><B>remove()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueItemIterator.html">PriorityQueue.QueueItemIterator</A>
<DD>This operation is unsupported.
<DT><A HREF="javaslam/util/ListSet.html#remove(int)"><B>remove(int)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Removes the element at the specified position in this set (optional
 operation).
<DT><A HREF="javaslam/tjt/JunctionTree.html#remove(javaslam.tjt.JunctionTree.Cluster)"><B>remove(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Removes a cluster from this junction tree.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#remove(javaslam.tjt.JunctionTree.Cluster)"><B>remove(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Removes a cluster from this junction tree.
<DT><A HREF="javaslam/util/ListSet.html#remove(java.lang.Object)"><B>remove(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Removes the the specified element from this set (optional
 operation).
<DT><A HREF="javaslam/util/PriorityQueue.html#remove(java.lang.Object)"><B>remove(Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Removes a particular item from the queue, if it exists.
<DT><A HREF="javaslam/tjt/JunctionTree.html#remove(javaslam.prob.Variable)"><B>remove(Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Removes a variable from this junction tree.
<DT><A HREF="javaslam/util/ListSet.html#removeAll(java.util.Collection)"><B>removeAll(Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Removes from this set all the elements that are contained in the
 specified collection (optional operation).
<DT><A HREF="javaslam/tjt/graph/Node.html#removeEdge(javaslam.tjt.graph.Edge)"><B>removeEdge(Edge)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Removes the supplied edge from this node to the supplied node (if
 such an edge exists).
<DT><A HREF="javaslam/prob/Gaussian.html#rename(javaslam.prob.Variable, javaslam.prob.Variable)"><B>rename(Variable, Variable)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Renames a variable in this Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.html#rename(javaslam.prob.Variable, javaslam.prob.Variable)"><B>rename(Variable, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Renames a variable in this junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#rename(javaslam.prob.Variable, javaslam.prob.Variable)"><B>rename(Variable, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Renames a variable in this cluster.
<DT><A HREF="javaslam/tjt/JunctionTree.JTEdge.html#rename(javaslam.prob.Variable, javaslam.prob.Variable)"><B>rename(Variable, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.JTEdge.html">JunctionTree.JTEdge</A>
<DD>Renames a variable in the separator of this edge.
<DT><A HREF="javaslam/prob/Gaussian.html#reparameterize(boolean)"><B>reparameterize(boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Reparameterizes this Gaussian; i.e., the parameterization will
 be switched from the canonical to the moment parameterization, or
 vice-versa.
<DT><A HREF="javaslam/util/PriorityQueue.html#reprioritize(java.lang.Object, java.lang.Comparable)"><B>reprioritize(Object, Comparable)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Updates the priority of an item already in the queue.
<DT><A HREF="javaslam/util/Flops.html#reset()"><B>reset()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>A method that resets the flop count.
<DT><A HREF="javaslam/util/ListSet.html#retainAll(java.util.Collection)"><B>retainAll(Collection)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Retains only the elements in this set that are contained in the
 specified collection (optional operation).
<DT><A HREF="javaslam/slam/ExampleModel.html#ROBOT_DIM"><B>ROBOT_DIM</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.html">ExampleModel</A>
<DD>The dimension of the robot state.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#RVEL"><B>RVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#RVEL"><B>RVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#RVEL"><B>RVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#RVEL"><B>RVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#RVEL_ABS_NOISE"><B>RVEL_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#RVEL_ABS_NOISE"><B>RVEL_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#RVEL_REL_NOISE"><B>RVEL_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#RVEL_REL_NOISE"><B>RVEL_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#rVelCtrl"><B>rVelCtrl</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>The current rotational velocity control (in radians per second).
</DL>
<HR>
<A NAME="_S_"><!-- --></A><H2>
<B>S</B></H2>
<DL>
<DT><A HREF="javaslam/prob/Sample.html"><B>Sample</B></A> - class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>.<DD>A utility class containing methods for sampling from various
 probability distributions.<DT><A HREF="javaslam/prob/Sample.html#Sample()"><B>Sample()</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Sample.html">Sample</A>
<DD>&nbsp;
<DT><A HREF="javaslam/prob/Gaussian.html#sample(int, java.util.Random)"><B>sample(int, Random)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Samples from this Gaussian distribution.
<DT><A HREF="javaslam/tjt/graph/NodeFilter.html#satisfies(javaslam.tjt.graph.Node)"><B>satisfies(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/NodeFilter.html">NodeFilter</A>
<DD>Returns <code>true</code> if the supplied node satisfies this
 predicate.
<DT><A HREF="javaslam/util/TJTF.html#say(java.lang.String)"><B>say(String)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>A method that reports a message.
<DT><A HREF="javaslam/prob/Gaussian.html#set(javaslam.prob.Gaussian)"><B>set(Gaussian)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Sets this Gaussian equal to the supplied Gaussian.
<DT><A HREF="javaslam/util/ListSet.html#set(int, java.lang.Object)"><B>set(int, Object)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Replaces the element at the specified position in this set with the
 specified element (optional operation).
<DT><A HREF="javaslam/util/TJTF.html#setBlather(boolean)"><B>setBlather(boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Determines whether mundane status messages should be displayed.
<DT><A HREF="javaslam/util/TJTF.html#setDebug(boolean)"><B>setDebug(boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Determines whether special (expensive) checks should be made to
 ensure that everything is operating correctly.
<DT><A HREF="javaslam/prob/Gaussian.html#setDoubling(boolean)"><B>setDoubling(boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Controls the memory allocation behavior of this Gaussian.
<DT><A HREF="javaslam/prob/Gaussian.html#setEta(javaslam.util.ListSet, Jama.Matrix)"><B>setEta(ListSet, Matrix)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Sets a subvector of <font face="Symbol">h</font>.
<DT><A HREF="javaslam/prob/Gaussian.html#setLambda(javaslam.util.ListSet, javaslam.util.ListSet, Jama.Matrix)"><B>setLambda(ListSet, ListSet, Matrix)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Sets a submatrix of <font face="Symbol">L</font>.
<DT><A HREF="javaslam/prob/Gaussian.html#setMu(javaslam.util.ListSet, Jama.Matrix)"><B>setMu(ListSet, Matrix)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Sets a subvector of <font face="Symbol">m</font>.
<DT><A HREF="javaslam/prob/Gaussian.html#setSigma(javaslam.util.ListSet, javaslam.util.ListSet, Jama.Matrix)"><B>setSigma(ListSet, ListSet, Matrix)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Sets a submatrix of <font face="Symbol">S</font>.
<DT><A HREF="javaslam/tjt/JunctionTree.html#setSignificance(double)"><B>setSignificance(double)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Sets a threshold used in adaptive message passing.
<DT><A HREF="javaslam/util/TJTF.html#setVerbose(boolean)"><B>setVerbose(boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Determines whether routine status messages should be displayed.
<DT><A HREF="javaslam/tjt/JunctionTree.html#significance"><B>significance</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>A threshold used in adaptive message passing.
<DT><A HREF="javaslam/util/ListSet.html#size()"><B>size()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns the number of elements in this set.
<DT><A HREF="javaslam/util/PriorityQueue.html#size()"><B>size()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns the number of items in this queue.
<DT><A HREF="javaslam/tjt/graph/Traversal.html#size()"><B>size()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Returns the number of nodes traversed thus far.
<DT><A HREF="javaslam/slam/SLAMFilter.html"><B>SLAMFilter</B></A> - interface javaslam.slam.<A HREF="javaslam/slam/SLAMFilter.html">SLAMFilter</A>.<DD>An interface implemented by filters for the Simultaneous
 Localization and Mapping (<font size="-1">SLAM</font>) problem.<DT><A HREF="javaslam/util/Flops.html#solve(int, int, int, boolean)"><B>solve(int, int, int, boolean)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to solve for
 <i>X</i> in the matrix equation <i>AX</i> = <i>B</i> where
 <i>A</i> is possibly symmetric positive definite.
<DT><A HREF="javaslam/util/Flops.html#sqrt()"><B>sqrt()</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the square root of a number.
<DT><A HREF="javaslam/util/ListSet.html#subList(int, int)"><B>subList(int, int)</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns a view of the portion of this set between the specified
 <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
<DT><A HREF="javaslam/tjt/graph/Node.html#swingEdge(javaslam.tjt.graph.Edge, javaslam.tjt.graph.Node)"><B>swingEdge(Edge, Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Changes an edge emanating from this node so that it emanates from
 the supplied node.
<DT><A HREF="javaslam/tjt/graph/Node.html#swingEdgesTo(javaslam.tjt.graph.Node)"><B>swingEdgesTo(Node)</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Node.html">Node</A>
<DD>Changes the origin of all (directed and undirected) edges
 emanating from this node to the supplied node.
<DT><A HREF="javaslam/util/TJTF.html#symmetrize(Jama.Matrix)"><B>symmetrize(Matrix)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Transforms an asymmetric matrix <i>M</i> into a symmetric matrix
 by setting it to (<i>M</i> + <i>M</i><sup>T</sup>)/2.
</DL>
<HR>
<A NAME="_T_"><!-- --></A><H2>
<B>T</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#thin(int)"><B>thin(int)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Thins the junction tree via a sequence of variable contractions
 so that no clusters have a size greater than <code>limit</code>.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#thin(javaslam.tjt.JunctionTree.Cluster, int, javaslam.prob.Variable)"><B>thin(JunctionTree.Cluster, int, Variable)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Removes variables from the supplied cluster so as to ensure its
 size is no greater than <code>limit</code>.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html"><B>ThinJunctionTree</B></A> - class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>.<DD>A thin (approximate) junction tree for a Gaussian graphical model.<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html"><B>ThinJunctionTree.Contraction</B></A> - class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>.<DD>Represents a <i>variable contraction</i> of a variable <i>v</i>
 along an edge <code>e</code> = <i>C<sub>i</sub> ->
 C<sub>j</sub></i>.<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#ThinJunctionTree.Contraction(javaslam.tjt.JunctionTree.JTEdge, javaslam.prob.Variable)"><B>ThinJunctionTree.Contraction(JunctionTree.JTEdge, Variable)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#ThinJunctionTree.Contraction(javaslam.tjt.JunctionTree.JTEdge, javaslam.prob.Variable, boolean)"><B>ThinJunctionTree.Contraction(JunctionTree.JTEdge, Variable, boolean)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#ThinJunctionTree.Contraction(javaslam.tjt.JunctionTree.JTEdge, javaslam.prob.Variable, boolean, double)"><B>ThinJunctionTree.Contraction(JunctionTree.JTEdge, Variable, boolean, double)</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#ThinJunctionTree()"><B>ThinJunctionTree()</B></A> - 
Constructor for class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Default constructor.
<DT><A HREF="javaslam/filter/Filter.html#time(javaslam.util.ListSet, double[], double[][], double[][])"><B>time(ListSet, double[], double[][], double[][])</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/Filter.html">Filter</A>
<DD>Performs a linear-Gaussian time update.
<DT><A HREF="javaslam/filter/InformationFilter.html#time(javaslam.util.ListSet, double[], double[][], double[][])"><B>time(ListSet, double[], double[][], double[][])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/InformationFilter.html">InformationFilter</A>
<DD>Performs a linear-Gaussian time update.
<DT><A HREF="javaslam/filter/JTFilter.html#time(javaslam.util.ListSet, double[], double[][], double[][])"><B>time(ListSet, double[], double[][], double[][])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Performs a linear-Gaussian time update.
<DT><A HREF="javaslam/filter/KalmanFilter.html#time(javaslam.util.ListSet, double[], double[][], double[][])"><B>time(ListSet, double[], double[][], double[][])</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/KalmanFilter.html">KalmanFilter</A>
<DD>Performs a linear-Gaussian time update.
<DT><A HREF="javaslam/filter/LinearizedFilter.html#time(javaslam.util.ListSet, javaslam.filter.NoisyVectorFunction)"><B>time(ListSet, NoisyVectorFunction)</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/LinearizedFilter.html">LinearizedFilter</A>
<DD>Performs an approximate nonlinear time update.
<DT><A HREF="javaslam/filter/NonlinearFilter.html#time(javaslam.util.ListSet, javaslam.filter.NoisyVectorFunction)"><B>time(ListSet, NoisyVectorFunction)</B></A> - 
Method in interface javaslam.filter.<A HREF="javaslam/filter/NonlinearFilter.html">NonlinearFilter</A>
<DD>Performs an approximate nonlinear time update.
<DT><A HREF="javaslam/tjt/JunctionTree.html#times(javaslam.prob.Gaussian)"><B>times(Gaussian)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Multiplies a new potential into the junction tree and restores
 validity (but not consistency).
<DT><A HREF="javaslam/prob/Gaussian.html#times(javaslam.prob.Gaussian, boolean)"><B>times(Gaussian, boolean)</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Multiplies two Gaussians.
<DT><A HREF="javaslam/tjt/JunctionTree.html#times(javaslam.prob.Gaussian, javaslam.tjt.JunctionTree.Cluster)"><B>times(Gaussian, JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Multiplies a new potential into a particular cluster of this
 junction tree and restores validity (but not consistency).
<DT><A HREF="javaslam/util/TJTF.html"><B>TJTF</B></A> - class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>.<DD>A class containing package-level utilities.<DT><A HREF="javaslam/util/TJTF.html#TJTF()"><B>TJTF()</B></A> - 
Constructor for class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html"><B>TJTSLAMFilter</B></A> - class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>.<DD>A thin junction tree filter for the Simultaneous Localization and
 Mapping (SLAM) problem.<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#TJTSLAMFilter(int, int, double[], double[][])"><B>TJTSLAMFilter(int, int, double[], double[][])</B></A> - 
Constructor for class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/graph/Edge.html#to"><B>to</B></A> - 
Variable in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>The end of this edge.
<DT><A HREF="javaslam/util/ListSet.html#toArray()"><B>toArray()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns an array containing all of the elements in this set in proper
 sequence.
<DT><A HREF="javaslam/util/ListSet.html#toArray(java.lang.Object[])"><B>toArray(Object[])</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/ListSet.html">ListSet</A>
<DD>Returns an array containing all of the elements in this set in proper
 sequence; the runtime type of the returned array is that of the
 specified array.
<DT><A HREF="javaslam/prob/Gaussian.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>Creates a simple <code>String</code> representation of this
 Gaussian that prints out its parameters using Matlab notation.
<DT><A HREF="javaslam/prob/Variable.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Returns the string representation of this variable's label.
<DT><A HREF="javaslam/util/PriorityQueue.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.html">PriorityQueue</A>
<DD>Returns a string representation of this priority queue.
<DT><A HREF="javaslam/util/PriorityQueue.QueueElement.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.util.<A HREF="javaslam/util/PriorityQueue.QueueElement.html">PriorityQueue.QueueElement</A>
<DD>Returns a string representation of this queue element.
<DT><A HREF="javaslam/tjt/JunctionTree.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Returns a String representation of this junction tree.
<DT><A HREF="javaslam/tjt/JunctionTree.Cluster.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.Cluster.html">JunctionTree.Cluster</A>
<DD>Returns a string representation of this cluster.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Returns a String representation of this thin junction tree.
<DT><A HREF="javaslam/tjt/graph/Edge.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Edge.html">Edge</A>
<DD>Returns a string representation of this edge.
<DT><A HREF="javaslam/filter/JTFilter.html#toString()"><B>toString()</B></A> - 
Method in class javaslam.filter.<A HREF="javaslam/filter/JTFilter.html">JTFilter</A>
<DD>Returns a string representation of this filter.
<DT><A HREF="javaslam/util/TJTF.html#toString(Jama.Matrix)"><B>toString(Matrix)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>Creates a Matlab string representation of a matrix.
<DT><A HREF="javaslam/util/Flops.html#trace(int)"><B>trace(int)</B></A> - 
Static method in class javaslam.util.<A HREF="javaslam/util/Flops.html">Flops</A>
<DD>Counts the number of floating point operations used to compute
 the trace of a square matrix <I>A</i>.
<DT><A HREF="javaslam/tjt/graph/Traversal.html"><B>Traversal</B></A> - class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>.<DD>An iterator that traverses the nodes of a graph.<DT><A HREF="javaslam/tjt/graph/Traversal.html#Traversal(javaslam.tjt.graph.Node)"><B>Traversal(Node)</B></A> - 
Constructor for class javaslam.tjt.graph.<A HREF="javaslam/tjt/graph/Traversal.html">Traversal</A>
<DD>Constructor.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#TVEL"><B>TVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#TVEL"><B>TVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#TVEL"><B>TVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#TVEL"><B>TVEL</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#TVEL_ABS_NOISE"><B>TVEL_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#TVEL_ABS_NOISE"><B>TVEL_ABS_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#TVEL_REL_NOISE"><B>TVEL_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#TVEL_REL_NOISE"><B>TVEL_REL_NOISE</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#tVelCtrl"><B>tVelCtrl</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>The current translational velocity control (in meters per second).
</DL>
<HR>
<A NAME="_U_"><!-- --></A><H2>
<B>U</B></H2>
<DL>
<DT><A HREF="javaslam/filter/UnscentedTransformation.html"><B>UnscentedTransformation</B></A> - class javaslam.filter.<A HREF="javaslam/filter/UnscentedTransformation.html">UnscentedTransformation</A>.<DD>The Unscented Transformation for linearizing functions with
 Gaussian-distributed inputs.<DT><A HREF="javaslam/filter/UnscentedTransformation.html#UnscentedTransformation(javaslam.filter.NoisyVectorFunction, javaslam.prob.Gaussian)"><B>UnscentedTransformation(NoisyVectorFunction, Gaussian)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/UnscentedTransformation.html">UnscentedTransformation</A>
<DD>Constructor.
<DT><A HREF="javaslam/filter/UnscentedTransformation.html#UnscentedTransformation(javaslam.filter.NoisyVectorFunction, javaslam.prob.Gaussian, double, double, double)"><B>UnscentedTransformation(NoisyVectorFunction, Gaussian, double, double, double)</B></A> - 
Constructor for class javaslam.filter.<A HREF="javaslam/filter/UnscentedTransformation.html">UnscentedTransformation</A>
<DD>Constructor.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#updateClusterSize(javaslam.tjt.JunctionTree.Cluster)"><B>updateClusterSize(JunctionTree.Cluster)</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Updates the <A HREF="javaslam/tjt/ThinJunctionTree.html#clustersBySize"><CODE>clustersBySize</CODE></A>
 index of cluster sizes.
<DT><A HREF="javaslam/tjt/JunctionTree.html#updated"><B>updated</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>The set of clusters that have been updated with new evidence but
 have not yet distributed their evidence (due to lazy or adaptive
 message passing).
</DL>
<HR>
<A NAME="_V_"><!-- --></A><H2>
<B>V</B></H2>
<DL>
<DT><A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html#v"><B>v</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.Contraction.html">ThinJunctionTree.Contraction</A>
<DD>The variable to contracted.
<DT><A HREF="javaslam/prob/Variable.html"><B>Variable</B></A> - class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>.<DD>A Gaussian vector variable.<DT><A HREF="javaslam/prob/Variable.html#Variable(int)"><B>Variable(int)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Constructor.
<DT><A HREF="javaslam/prob/Variable.html#Variable(java.lang.Object, int)"><B>Variable(Object, int)</B></A> - 
Constructor for class javaslam.prob.<A HREF="javaslam/prob/Variable.html">Variable</A>
<DD>Default constructor.
<DT><A HREF="javaslam/prob/Gaussian.html#variables"><B>variables</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>An unmodifiable ordered set whose elements are the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s bound by this Gaussian.
<DT><A HREF="javaslam/tjt/JunctionTree.html#variables"><B>variables</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>The <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s present in this junction tree.
<DT><A HREF="javaslam/prob/Gaussian.html#vars"><B>vars</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>An ordered set whose elements are the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s
 bound by this Gaussian.
<DT><A HREF="javaslam/prob/Gaussian.html#varsToStarts"><B>varsToStarts</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>A map whose keys are the <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A>s bound by this
 Gaussian and whose values are <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/lang/Integer.html"><CODE>Integer</CODE></A>s giving
 the starting index of the corresponding subvectors of <A HREF="javaslam/prob/Gaussian.html#vP"><CODE>Gaussian.vP</CODE></A>
 and subblocks of <A HREF="javaslam/prob/Gaussian.html#mP"><CODE>Gaussian.mP</CODE></A>.
<DT><A HREF="javaslam/tjt/JunctionTree.html#varToClusters"><B>varToClusters</B></A> - 
Variable in class javaslam.tjt.<A HREF="javaslam/tjt/JunctionTree.html">JunctionTree</A>
<DD>Maps each <A HREF="javaslam/prob/Variable.html"><CODE>Variable</CODE></A> to the <A HREF="http://java.sun.com/j2se/1.4/docs/api/java/util/Set.html"><CODE>Set</CODE></A> of <A HREF="javaslam/tjt/JunctionTree.Cluster.html"><CODE>Cluster</CODE></A>s containing it.
<DT><A HREF="javaslam/filter/VectorFunction.html"><B>VectorFunction</B></A> - interface javaslam.filter.<A HREF="javaslam/filter/VectorFunction.html">VectorFunction</A>.<DD>A vector-valued function of a vector input.<DT><A HREF="javaslam/util/TJTF.html#verbose"><B>verbose</B></A> - 
Static variable in class javaslam.util.<A HREF="javaslam/util/TJTF.html">TJTF</A>
<DD>A flag indicating whether routine status messages should be
 displayed.
<DT><A HREF="javaslam/prob/Gaussian.html#vP"><B>vP</B></A> - 
Variable in class javaslam.prob.<A HREF="javaslam/prob/Gaussian.html">Gaussian</A>
<DD>The vector parameter; this is <font face="Symbol">m</font> if
 <A HREF="javaslam/prob/Gaussian.html#isMoment"><CODE>Gaussian.isMoment</CODE></A> is <code>true</code> and <font
 face="Symbol">h</font> otherwise.
<DT><A HREF="javaslam/filter/Linearization.html#vSet"><B>vSet</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>A list of random variables representing the noise inputs of the
 function.
</DL>
<HR>
<A NAME="_W_"><!-- --></A><H2>
<B>W</B></H2>
<DL>
<DT><A HREF="javaslam/slam/TJTSLAMFilter.html#width"><B>width</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/TJTSLAMFilter.html">TJTSLAMFilter</A>
<DD>The cluster size limit of the thin junction tree.
<DT><A HREF="javaslam/tjt/ThinJunctionTree.html#width()"><B>width()</B></A> - 
Method in class javaslam.tjt.<A HREF="javaslam/tjt/ThinJunctionTree.html">ThinJunctionTree</A>
<DD>Computes the width of this junction tree.
</DL>
<HR>
<A NAME="_X_"><!-- --></A><H2>
<B>X</B></H2>
<DL>
<DT><A HREF="javaslam/slam/AbstractSLAMFilter.html#x"><B>x</B></A> - 
Variable in class javaslam.slam.<A HREF="javaslam/slam/AbstractSLAMFilter.html">AbstractSLAMFilter</A>
<DD>The variable <i>x</i>, which represents the state of the robot.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#XPOS"><B>XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#XPOS"><B>XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#XPOS"><B>XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#XPOS"><B>XPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/filter/Linearization.html#xSet"><B>xSet</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>A list of random variables representing the inputs of the
 function.
</DL>
<HR>
<A NAME="_Y_"><!-- --></A><H2>
<B>Y</B></H2>
<DL>
<DT><A HREF="javaslam/filter/Linearization.html#y"><B>y</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>A random variable representing the output of the function.
<DT><A HREF="javaslam/slam/ExampleModel.MotionModel.html#YPOS"><B>YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.MotionModel.html">ExampleModel.MotionModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.OdometryModel.html#YPOS"><B>YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.OdometryModel.html">ExampleModel.OdometryModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html#YPOS"><B>YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.LandmarkMeasurementModel.html">ExampleModel.LandmarkMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html#YPOS"><B>YPOS</B></A> - 
Static variable in class javaslam.slam.<A HREF="javaslam/slam/ExampleModel.InverseMeasurementModel.html">ExampleModel.InverseMeasurementModel</A>
<DD>&nbsp;
<DT><A HREF="javaslam/filter/Linearization.html#ySet"><B>ySet</B></A> - 
Variable in class javaslam.filter.<A HREF="javaslam/filter/Linearization.html">Linearization</A>
<DD>A list set containing only <A HREF="javaslam/filter/Linearization.html#y"><CODE>Linearization.y</CODE></A> (for convenience).
</DL>
<HR>
<A HREF="#_A_">A</A> <A HREF="#_B_">B</A> <A HREF="#_C_">C</A> <A HREF="#_D_">D</A> <A HREF="#_E_">E</A> <A HREF="#_F_">F</A> <A HREF="#_G_">G</A> <A HREF="#_H_">H</A> <A HREF="#_I_">I</A> <A HREF="#_J_">J</A> <A HREF="#_K_">K</A> <A HREF="#_L_">L</A> <A HREF="#_M_">M</A> <A HREF="#_N_">N</A> <A HREF="#_O_">O</A> <A HREF="#_P_">P</A> <A HREF="#_Q_">Q</A> <A HREF="#_R_">R</A> <A HREF="#_S_">S</A> <A HREF="#_T_">T</A> <A HREF="#_U_">U</A> <A HREF="#_V_">V</A> <A HREF="#_W_">W</A> <A HREF="#_X_">X</A> <A HREF="#_Y_">Y</A> 
<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Index</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="index-all.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

</BODY>
</HTML>
